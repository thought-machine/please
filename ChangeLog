Version 3.5.0
-------------

    * New command, `plz rebuild`, which behaves like `plz build` except that the named targets
      (but not their dependencies) are always rebuilt.
    * `remote_file` and `maven_jar` rules now print the URL before fetching, to make it a
      bit easier to follow what they're actually trying to do if they fail.
    * The Python hash seed is fixed before initialising the interpreter, so dict / set iteration
      order should be deterministic between runs. The security implications aren't really a
      concern in this context but repeatability is.


Version 3.4.1
-------------

    * fix for type checking script when run through python3
    * Don't try to retrieve results from containerised tests that have no_test_output = True.
    * Private targets are omitted from `plz query somepath`.


Version 3.4.0
-------------

    * `plz run` and `plz test` now default to the current package + subpackages when run
      without arguments. `plz clean` and `plz query` still retain the old semantics of the
      entire repo.


Version 3.3.0
-------------

    * Build / test commands are now run with "-o pipefail" so you don't have to specify
      yourself. This could potentially break any rules that relied on the default
      behaviour although it's unlikely that anything did that deliberately.
    * Sources are deduplicated on build rules.
    * Fixed a minor bug where plz run would incorrectly pass the --assert_version flag to
      the target if it updated automatically.
    * RPC cache now gives up after a sufficient number of failures so it doesn't drown
      you in messages on long builds.
    * If any of the entries in `srcs` in a build rule are None, they're skipped. This makes
      it easier to write some rules with optional inputs.
    * Added a config property for the default maven repo.
    * Output file from java_binary is now configurable.


Version 3.2.0
-------------

    * Added type checks on arguments to build rules, because the errors can be
      obtuse if you get them wrong.
      Strictly speaking this is compatible with the previous release since it simply
      enforces documentation, although there are subtle cases that would have been
      accepted before that no longer are.


Version 3.1.3
-------------

    * Die immediately after a build finishes with unsuccessful targets; this matches
      previous behaviour in the face of --failing_tests_ok.


Version 3.1.2
-------------

    * When a target fails, plz now waits for all other building targets to conclude
      before terminating. We expect that over repeated builds this will be faster
      because it won't keep abandoning half-complete tasks.
      Compiler feedback should show immediately, and you can Ctrl+C it to stop whenever.


Version 3.1.1
-------------

    * Fixed `plz run` on java_binary rules not marked as self_executable.
    * Various minor cache fixes. Access times should be correctly regenerated
      on restart now.
    * Initial work on FreeBSD port; is now mostly buildable there.


Version 3.1.0
-------------

    * Extra GOPATH additions for cgo_library / cgo_test are configurable through
      [go]gopath setting. We typically use third_party/go for this.
    * pip_library commands changed a bit to try to make it more deterministic.
    * When artifacts fail hash verification after cache retrieval, attempt to build
      locally instead of failing.


Version 3.0.2
-------------

    * Some caching fixes; directory entries are now retrieved correctly between restarts
      of the RPC cache server.


Version 3.0.1
-------------

    * Fix to pex generation from previous version where it could sometimes add extraneous
      __init__.py files which conflicted with real ones added later.


Version 3.0.0
-------------

    * Rewrite of cffi parser interface to use cffi's new embedding
      (see http://cffi.readthedocs.io/en/latest/embedding.html).
      This means that we can use cpython or pypy as engines, and build both as separate
      .so's which we attempt to dlopen() at runtime. The advantage of all this is that
      it becomes possible to run plz with CPython + cffi, which is quite a bit more
      straightforward to get installed in the way we need on Linux at present.
      PyPy should continue to work for anyone who had it working already though.
    * Builtin rules no longer call zip and jar, because those produce nondeterministic
      output due to encoding timestamps into their output. They now use jarcat instead.
      Note that this is a breaking change for some maven_jars rules whose hashes will change.


Version 2.4.0
-------------

    * Minor fixes to Python coverage code
    * Added a 'native' attribute to maven_jar which attempts to fetch a .jar with
      native code. It also now takes 'hashes' since those might of course have
      different ones on each architecture.
    * Minor fixes to reverse deps queries.


Version 2.3.5
-------------

    * Better identification of dependency mediation in please_maven
    * Rewording of version upgrade message.


Version 2.3.4
-------------

    * Incrementality fix for some cases where targets weren't correctly rebuilt
      if their dependencies had been cached.


Version 2.3.3
-------------

    * Fix for sh_binary which used an incorrectly formatted version of sed.

Version 2.3.2
-------------

    * Fix where existing partial outputs were sometimes not removed correctly.


Version 2.3.1
-------------

    * Fix for cc_static_library which was broken in previous version.


Version 2.3.0
-------------

    * Added Bazel compatibility mode; can be configured in .plzconfig and alters several
      aspects of parsing behaviour to better mimic Bazel's behaviour. This allows parsing
      of simple Bazel projects, complex Skylark rules are a long way from working at this
      point though.
    * cc_library gained new arguments, `includes` and `defines` which add directories to
      the include path and define preprocessor symbols respectively. These are transitively
      applied to dependent cc_library rules.
    * cc_test has a new argument, `write_test_main` which defaults to true. If set to False
      it does not provide a main() and you must write it yourself.
    * java_binary no longer has to have main_class specified.
    * cc_library generates (possibly) more sub-rules to compile each of its `srcs` separately,
      which is significantly faster for large numbers of inputs.
    * filegroup now has an internal implementation rather than being done in bash. This
      allows some things internally to be done more robustly and avoids errors from command
      line length limits for very large filegroups.
    * `plz query somepath` now respects :all labels.


Version 2.2.1
-------------

    * Reworked ordering of tasks during build; should make little difference to overall time
      but parses will happen relatively faster so the estimated total task number will rise
      faster. This is more akin to the pre-1.8 behaviour.
    * Fix bug where targets with need_transitive_deps = True could incorrectly receive tools
      of their indirect deps in their tmp directory.


Version 2.2.0
-------------

    * Python targets now have a `stripped` build config in which the .py files are stripped out
      and only .pyc / .pyo bytecode files included in the .pex.
      We're considering making this the default behaviour for `opt` but if we do that will be
      left for a future major revision.


Version 2.1.2
-------------
    * Fixes one more bug with sh_binary where paths were taken to be relative when they were absolute.

Version 2.1.1
-------------
    * Fixes bug with sh_binary not ignoring the main script properly when generating the tarball.

Version 2.1.0
-------------
    * Adds additional features to sh_binary to make it more complete. sh_binary now creates
      a single bash script. This script contains all dependencies as well as the main
      script to be executed. When the sh_binary is run, it extracts all the files
      to the current directory and finally executes the main script.

Version 2.0.0
-------------

    * We are going to try doing semver from here on, so this release increments the major
      version due to several very slightly breaking changes.
    * More convenient output on incorrect hashes.
    * C++ tests now honour being given a specific test to run (The current implementation
      of this requires C++11, we could write it in a more tedious way if it's a problem).
    * Reading stdin for build labels is now done asynchronously, so Please will build initial
      targets from a relatively slow supplying process immediately rather than waiting for them all.
      `plz query affectedtargets` and `plz query completions` still retain the old behaviour
      for technical reasons (aka. laziness).
      It is also slightly more robust about the input it accepts (esp. around spaces).
    * `plz query alltargets` now does not display hidden targets (those starting with an
      underscore) by default. It has a new `--hidden` flag which will show them as well.
    * `subinclude()` can now be given a URL to download build defs from. Downloads will be
      deduplicated and run as `real` build targets so the parse remains fast (or at least
      as fast as possible given that something has to be downloaded for it to proceed).


Version 1.8.2
-------------

    * Fix interactive display on versions of iTerm (2.1.x) that don't support the
      ANSI CPL instruction.
    * Go version in config now only affects hashes of Go targets. This alters the
      general hash calculation logic so unfortunately will force rebuilds of all targets -
      this is unavoidable but will lead to better incrementality in future.
    * Suffix temp build directories with #.build (and tests with #.test instead of just .test)
      to avoid cases where they clash with paths to sub-packages that happen to
      begin with the same name.


Version 1.8.1
-------------

    * Support for loading arch-specific config files, .plzconfig_linux_amd64 etc.
      Allows tweaking config for different machine types.


Version 1.8.0
-------------

    * Reworked internal queuing implementation which prioritises `subinclude()` targets
      more highly. `subinclude()` itself also caches compiled code.
    * New feature, `plz query reverseDeps` which finds reverse dependencies of a target.
    * `plz query graph` output has more features in it.
    * new setting in config, blacklistdirs, which excludes certain directory names from
      being walked by `plz build ...` and the like.
    * Upgraded python coverage package.
    * Upgraded gRPC implementation. Note that this is a breaking change for the RPC cache
      so that will need to be upgraded in sync with plz itself.
    * Allow passing build target expressions to --exclude.
    * Fix for some relative implicit labels passed on the command line which sometimes
      incorrectly lost a slash.
    * Terminal window titles are now updated as build progresses.


Version 1.7.3
-------------

    * Support for maven_jars fetching specified optional dependencies via 'optional' argument.


Version 1.7.2
-------------

    * Fix to Java rules which were subtly broken in previous version.


Version 1.7.1
-------------

    * Additional flag, `--include_file`, to `plz cover` which filters coverage output to
      just the given files.
    * maven_jars now has two new arguments, `combine` which combines its transitive deps
      into a single uberjar and `hash` which sets the hash for that uberjar.
      The intention here is to make it more lightweight to set a hash for a single target
      rather than having to provide potentially many individual hashes.
    * Fixed aliases which were accidentally broken by some flag changes.


Version 1.7.0
-------------

    * Reworking of error handling in parsing code. Previous code used to panic back through
      the parser which deeply upset PyPy (often we got away with it because we'd die before
      anything else could go wrong, but not always). Now errors are returned to Python and
      reraised as exceptions there - which implies that it's possible for BUILD code to
      catch and handle such exceptions, although I don't recommend writing them that way :)
    * Optimised glob() a bit so it doesn't descend into directories that will never match
      the given pattern.
    * Fixed compilation of clang tests with python3
    * Officially ban subincluding of local targets (didn't actually work before anyway)
    * `plz clean` now cleans sub-targets as well
    * Banned double slashes in build labels which was being incorrectly let though, leading
      to some very strange failures.
    * Ensure paths are relative in hash memoisation - improves hit rate by about 30% and
      is a performance improvement (although probably not very noticeable in most cases).
	* `plz cover` now has a `--line_coverage_report` / `-l` flag to produce line-by-line
      coverage output for its affected files.


Version 1.6.7
-------------

    * Fix for go_src part of proto_library; don't think we exercise that internally
      anywhere any more, but it is now a bit less broken than before.


Version 1.6.6
-------------

    * Fix to flaky tests; don't count as failures once success has been reached.


Version 1.6.5
-------------

    * BuildGraph now uses a RWMutex instead of a normal Mutex for slightly better concurrency.
    * Added `plz hash` command which calculates the current hash for targets.
    * Jarcat now does proper unsigning of jars always.


Version 1.6.4
-------------

    * `glob()` now correctly finds files in the current directory that are prefixed
      with **, ie. `glob(['**/*.png'])` matches `a.png`.


Version 1.6.3
-------------

    * Proto rules now correctly set up C++ headers / sources separately which fixes
      compilation with Clang.


Version 1.6.2
-------------

    * Fix for proto rules where grpc_library sometimes did not add a plugin correctly.


Version 1.6.1
-------------

    * Various tools now honour the please.location setting correctly.


Version 1.6.0
-------------

    * RPC cache now initialises asynchronously so if it's not available the
      build will not hang waiting for its connection to time out.
      This is a breaking addition to the cache's interface since it is now required to
      implement the gRPC health check (from google.golang.org/grpc/health) so
      v1.6+ of the server will have to be deployed to support v1.6+ clients.
      It will remain backwards compatible for older clients though.
    * Plz now comes with a wrapper script which can be committed and will fetch
      plz and invoke it. Makes it easy to use for people who don't have it
      installed already, ala Gradle's gradlew script.
    * The default location for tools is in ~/.please instead of /opt/please,
      which again makes it easier for people who don't have the tools already.
    * --max_flakes flag has been removed in favour of --num_runs always making
      a test run exactly that many times. Hopefully this is less confusing.
    * `query alltargets` now obeys the original targets and --include / --exclude better.
    * There is now a `system_library` rule which can collect files from outside the build tree.
      Correspondingly, there is a `system_srcs` attribute on `build_rule`.


Version 1.5.12
--------------

    * Altered exclusion rules for java_binary / java_test to better support native libraries.


Version 1.5.11
--------------

    * Write explicit failures into unit test output on timeout etc. Needed for some downstream
      tools that don't check attributes like 'failures' and need explicit entries.


Version 1.5.10
--------------

    * Fix for multiple caches which could sometimes panic with a negative waitgroup.


Version 1.5.9
-------------

    * grpc_library now correctly honours the 'languages' argument.


Version 1.5.8
-------------

    * Various fixes to RPC cache. Use base64 URL encoding and short hashes.


Version 1.5.7
-------------

    * Adds `go generate` support. You can now call it by adding `go_tools` to your go_library.


Version 1.5.6
-------------

    * Fix bug where golang tests pass if they panic since the exit code was being ignored
      after piping the command to tee.
    * 'plz query completions' now treats \: as equivalent to : to work around #18.


Version 1.5.5
-------------

    * Another similar fix for ForkExec call to cache_cleaner.


Version 1.5.4
-------------

    * Fix to cache_cleaner which wasn't always cleaning correctly.


Version 1.5.3
-------------

    * Fix tarballs to be consistent about /opt/please/please_go_test.


Version 1.5.2
-------------

    * Fix incorrect warning on tools that have multiple outputs.


Version 1.5.1
-------------

    * Fixed a bug where importing of libraries in test main files could be indeterminate
      if you had multiple libraries of the same name in different subdirectories.


Version 1.5.0
-------------

    * Support for build configurations, activated by '-c opt' and '-c dbg'. Those two
      are provided by default on C++ and Go rules; other languages can stick with a
      single command at present, use those and / or define their own configs.
    * The 'strip' config option and go_binary argument has been removed. It's now
      implicit in -c opt for go_binary.
    * C++ config options have changed a lot; the test / normal dichotomy has gone, we now
      have defaults for dbg and opt and a default set of ldflags. -lunittest++ is applied
      automatically by cc_test.
    * --no_cache has been changed to --nocache for consistency.
    * The -c argument to plz clean is now removed. Default is to clean the cache,
      and it honours the top-level --nocache flag if you don't want to clean that.
    * python_library now has an 'out' argument where you can set the name of the output
      pex. It defaults to the same as before.
    * More reliable returning of test output when tests time out.


Version 1.4.9
-------------

    * 'plz clean' now backgrounds itself when possible, in which case the user can
      continue with other tasks with no delay.
    * Added licenses() builtin function for Bazel compatibility; it roughly parallels
      theirs in setting the default licence for all targets in a BUILD file. Implicitly
      we can also now use package(default_licences = [...]) which is equivalent.
    * + is now allowed in names of build rules.
    * Fixed .deb package to include plz_diff_graphs.


Version 1.4.8
-------------

    * Fixed a bug where Please would sometimes panic during coverage display.
    * 'plz query graph' now includes all transitive dependencies of requested targets
      as well as the targets themselves.


Version 1.4.7
-------------

    * Quoting of expansions in shell commands now only happens when needed.
    * $PKG variable is available to test commands as well.
    * $ROOT_DIR variable is no longer available to any commands.


Version 1.4.6
-------------

    * Added a 'tools' attribute on genrules which refers to things used to build a rule
      which aren't copied into the temp directory.
    * Fixed bug where filegroup() didn't correctly honour the binary flag.


Version 1.4.5
-------------

    * Fix debs to have .jar suffix correctly.
    * cc_library now correctly supports multiple srcs. As a result it produces a single .a
      always instead of .o files. 'archive' attribute is now deprecated.


Version 1.4.4
-------------

    * Make timeout for retrieving Dockerised test results configurable, and default to
      a higher value.
    * Remove results file before running plz test or plz cover.
    * Add configurable extensions which can be excluded from coverage.


Version 1.4.3
-------------

    * Adds support for nested tests in golang (e.g. test suites).


Version 1.4.2
-------------

    * Add a test failure when the test returns nonzero but produces a valid output
      file with no errors, so we always show at least one in the summary.
    * Add a cc_static_library rule which archives a transitive set of C++ rules.
      Essentially it's the static counterpart to cc_shared_object.
    * 'plz op' repeats the previous operation.
    * Non-zip-safe pexes are now always extracted at startup, even if pex thinks
      it doesn't need to. Fixes a bug where incrementality wasn't always correct
      because we modify the .pex file after pex has built it.
    * New flags --colour and --nocolour allow one to force coloured output on/off.


Version 1.4.1
-------------

    * Temporary directories are now cleaned after successfully building or testing.
    * Minor updates to interactive console display.
    * Fixes to make cgo_library more robust.
    * Small fix to cc_embed_binary which no longer requires passing deps if the src
      is generated via a genrule.


Version 1.4.0
-------------

    * java_binary and java_test now generate a self-executable .jar file and no
      wrapper script, so the _name#jar sub-rule is no longer generated.
    * A number of deprecated arguments have been removed; for example
      source_under_test, headers / exported_headers, etc.
    * Added a global config parameter to allow enabling/disabling PyPI globally.
    * Slightly stricter type checking of arguments to build_rule
    * All output of build steps now prints to stderr instead of stdout
      (plz query still prints to stdout but plz test / plz build don't)
    * Config hashes are now much more granular; only things that affect something
      global are used in the calculation of the config hash. Changes to tools etc
      are assumed to be handled by the rule hash of any rule using that tool.
    * Test container settings in the global config only affect containerised
      test rules and only at test time.
    * Added a nonce field to the config which we'll use to invalidate the config
      hash when necessary. This might happen at any minor release but should
      be rare that we'll have to change it.
    * Interactive display should be a bit nicer on some non-vsynced terminals
      (xterm? not entirely sure what the conditions here were).
    * 'query graph' now accepts a list of targets to filter to.
    * Support for building with python3.
    * Initial support for aliases in config file; the implementation is a little
      agricultural but they seem to work so far, within their limits.
    * Fix a bunch of small bugs too numerous to mention here.


Version 1.3.9
-------------

    * go_get now takes a `revision` argument which allows pinning libraries to a
      particular git revision. `install` now has no effect on it.
    * Adding new targets to a package in post build functions now takes effect
      immediately, rather than waiting until the end of that post build function.
      Fixes some subtle race conditions around dependencies.


Version 1.3.8
-------------

    * Fixed several (benign) race conditions in the interactive display in the interest
      of having it run cleanly under go's race detector.
    * Bunch of small cleanups suggested by gometalint.
    * Add fpm_package and fpm_deb rules and use those to build packages instead of
      top-level script.
    * Fix for test result hashes; make them the same length as others so the cache cleaner
      finds them ok.
    * Fixed a hash calculation bug that would sometimes silently fail when the sources of a rule
      included a symlink to a directory.


Version 1.3.7
-------------

    * Rules that specify a source dependency on a single output of another rule are now
      honoured correctly when being built into a larger rule (eg. a python_library into
      a python_binary, as happens often with protos).
    * Added option to proto config to rewrite package of Python proto modules.


Version 1.3.6
------------

    * please_maven now correctly fetches all transitive dependencies, not just one level.
    * Added org.ow2.asm:asm-debug-all as a dependency for the test runner which was missing.
    * 'plz query graph' now outputs labels in the graph dump.
    * plz_diff_graphs can now include/exclude based on labels.


Version 1.3.5
-------------

    * Fixed a couple of subtle internal race conditions. Suspect that most but not all
      cases were benign, and it's nicer to have them gone, albeit at the cost of more
      lock contention - not that it seems to matter particularly.
    * More robust Python licence detection.


Version 1.3.4
-------------

    * More informative error messages when parsing fails due to not finding a package.
    * Defaults for repeated entries in the config files now only take effect if nothing else
      is specified (ie. the entries in the config replace instead of appending). This
      was always the intended behaviour although it's technically breaking.
    * Added 'plz query graph' command that produces a (currently fairly minimal) JSON
      representation of the graph that other tools could consume.
    * Added a tool to diff two graphs produced by new 'query graph' command.


Version 1.3.3
-------------

    * Fix to filegroup rules at the top level of the repo.
    * Fix some hash instability in at least some rules.


Version 1.3.2
-------------

    * Support for autodetecting licenses for packages found in a maven_jars rule.
      Still pretty experimental since it's surprisingly hard to handle all the maven output
      (maybe having someone write this who knew more about Maven would have been an idea...)
    * Fix a parse bug where we need to transitively pass the requirement to build a target
      that's needed for parse.
    * Correct bug in output where it would sometimes crash in rare circumstances (attempting
      to print build output of a target that wasn't built due to 'manual' label or similar)


Version 1.3.1
-------------

    * Added possibility for targets to depend on a single output of another rule,
      using the format //package:target:output_file. This isn't accepted as a command
      line input and is still a little experimental. Proto rules have been changed to
      use it instead of generating #only sub-rules.
    * Changed detection of multiple rules outputting the same file to parse-time detection
      instead of unreliable build-time detection (this requires the proto changes above).
    * The exec statement is now banned from the build language.
    * When multiple caches are configured, artifacts fetched from a lower-priority cache
      are stored into a higher-priority cache (eg. RPC cache -> dir cache).
    * Support for associating licences with build targets. Can specify which to accept
      and reject in the config.


Version 1.3
-----------

    * Add support to go_binary for stripping symbols.
    * Added self-cleaning to HTTP cache
    * Added RPC cache implementation.
    * Fixed "source file not found" error in some (fairly complex) cases
      (I think, this one has been a long battle...)
    * Changed jarcat to proper logging & go-flags library
    * Implement file copying to dir cache via copy+rename to avoid errors when files
      are half-written.
    * Building with PyPy 4.0
    * Redid locking around parsing, should allow for better parallelism there
      (although I think PyPy is still limited by its GIL).
    * Introduced new builtin build function subinclude() which is similar to include_defs
      but can be visibility controlled and consumes a real build label instead of basically
      a file path. Will eventually remove include_defs since it can't be visibility controlled.
    * python_binary rules can be depended on by python_library rules and imported as though
      they were a python_library.


Version 1.2.7
-------------

    * Tag test results files with their runtime hash so they are correctly re-run
      when runtime data files change
    * Small fix to cc_shared_object which was incorrectly marked as binary.


Version 1.2.6
-------------

    * Propagate require / provide through exported_deps when producing sources.
    * Add zip_safe as a flag on python_library and pip_library. python_binary and
      python_test will pick this up if it's in their transitive dependencies and
      mark the pex appropriately.
    * Add a flag to control level of messages logged to file output separate from
      normal verbosity.


Version 1.2.5
-------------

    * Import ban in Python changed to work by inspecting the AST instead of hacking
      __builtins__. Removed some hacky global state changes as a result and added
      caching of bytecode which seems quite a bit faster for parsing.
    * Add flag to print commands as they're run (CEO request).
    * Use directories under /tmp for containerised tests rather than top-level ones
      so they can be run as non-root users within the container.


Version 1.2.4
-------------

    * Add detection of multiple rules outputting the same files. This is trickier
      then one might think due to things like filegroup() and python_library()
      repeating their outputs again so must be done at build time (not parse time).
    * Make output trace file configurable.
    * Delete test results file at plz startup.
    * Disallow : or / in an incoming target name.
    * Small cleanup which results in Java source / target levels now being strings.


Version 1.2.3
-------------

    * Small bugfix: named sources that are build labels now automatically add the
      dependency in the same way that anonymous sources do.
    * Fix a case where post-build rules weren't always linking up deps properly.
	* Rename split_path_ext to just splitext, it's more natural.


Version 1.2.2
-------------

    * Small bugfix: always attempt to kill container, even if we can't retrieve results.
    * Add basename, dirname, split_path and split_path_ext as global utility functions.


Version 1.2.1
-------------

    * Docker change: rather than attempting to run as the current user which often
      has weird effects because they're not known within the container, run as root and
      extract the files afterwards with 'docker cp' to avoid root ownership.
    * Added timeout and container arguments to sh_test which were missing
    * Small improvement to 'plz query print' to not repeat things that are implied
      (requires -> labels, exported_deps -> deps).
    * Strip all leading underscores for dependent rule names in interactive display
    * Remove PY_PKG variable, just replace it in bash
    * OP has merged my go-flags patch upstream, it's no longer needed
    * Allow specifying the output name of a go_library rule
    * Add labels arg to filegroup


Version 1.2
-----------

    * Support for acquiring the transitive set of labels a rule & its dependencies possess.
      Useful for implementing properties that affect the final target, eg. cc_library
      linker flags being applied to the final cc_binary.
    * cc rules: change 'headers' and 'exported_headers' to just 'hdrs', which are always
      exported because that's generally what you want. Will consider adding 'private_headers'
      or similar later if there's a need but for now I'd prefer the default to be obvious.
    * Incremental pex compilation; every python_library rule generates a little .zip file
      of just its stuff which get merged together in the final rule. Quite fiddly to get
      right but the speedup is dramatic.
    * Some rewriting of Go rules to make them more robust for complex libraries & go_get.
    * Added an exclusive file lock to two plz processes running in the same repo will
      not run simultaneously (unless you pass --nolock).


Version 1.1.4
-------------

    * Added jvm_args parameters to java_test and java_binary so it's possible to
      customise JVM startup.


Version 1.1.3
-------------

    * `plz update` now ignores the selfupdate field in config and always updates.
    * Added new subcommand, `plz query output` to get the outputs of a rule.


Version 1.1.2
-------------

    * Fix passing relative targets on command line; was accidentally broken by parsing
      build labels earlier on in the initialisation process.
    * Refactor of the underlying zip writer stuff in jarcat. Doesn't make much difference
      yet but is a step towards some future work.
    * Add a count of number of targets done / total which better approximates progress.


Version 1.1.1
-------------

    * Upgrade to go 1.5, at last fixed the PyPy issue with a couple of lines of Go.
      Note that this is a breaking change for developers (but invisible to users of plz,
      so we're doing it at a minor version).
    * Share env-building code between build & test, and log more for tests.
    * Fixes to http cache.
    * New command, 'query affectedtargets', which is similar to 'query affectedtests' but
      finds all targets, not just tests. 'query affectedtargets --tests' obsoletes
      'query affectedtests' which will be removed at plz 1.2.


Version 1.1
-----------

    * Major version bump because numbers were getting too big.
    * HTTP cache ready for early adopter testing
    * Can set containerisation settings on a per-target basis and control the user Docker
      runs as within the container.
    * Changed $(location ...) style substitutions to use relative instead of absolute paths
      so they can be shared via the HTTP cache.


Version 1.0.13
--------------

    * Expand ~ to home path when building targets.


Version 1.0.12
--------------

    * Initial implementation of HTTP cache, not yet ready to use.
    * Add a little more logging when targets fail to build, which we've seen a few times.
    * Some suggestions from go vet, one of which may improve locking potentially
    * Ensure rule outputs are added uniquely.


Version 1.0.11
--------------

    * Fix for cases where sometimes parse errors would not be reported.
      Turned out to be related to disallowing imports, so we attempt to
      allow them during compilation (but not execution) of code.
	* Update of go rules to be more correct and hopefully streamlined around go_get.


Version 1.0.10
--------------

    * Added RunArgs to [docker] section of config file to allow passing it
      arbitrary extra arguments.
    * Rewrite of parts of the Go rules to more correctly support targets
      in subdirectories.
    * add_out() function introduced to build language which can be used
      to annotate a target with additional outputs, particularly during
      post-build function. Still slightly experimental.


Version 1.0.9
-------------

    * 'query completions' can now be filtered to particular targets, so it will
      only complete binaries for 'plz run' and tests for 'plz test' or 'plz cover'.
    * Update by downloading tarballs instead of individual binaries. This deprecates
      the --extra_tools flag but we will keep it for compatibility for a while.
    * Fix for query affectedtests so it correctly excludes manual tests.


Version 1.0.8
-------------

    * Bugfix, 'query affectedtests' not always reading from stdin properly.


Version 1.0.7
-------------

    * Bugfix, previous version mistakenly changed 'query input' to 'query inputs'.


Version 1.0.6
-------------

    * Remove SRCDIR variable and built-in supporting code. No longer needed
      for compatibility and the symlink causes problems for some rules because
      it introduces a diamond into the folder structure.
    * Remove __import__ builtin from parser so build scripts can no longer
      import external modules.
    * Added a test_only attribute for library rules that ensures they can only be
      used by tests or other test_only rules.
    * python3 compatibility fix in test_main.py
    * Added a package() function that can be used to set various global config
      things (probably most usefully, default_visibility).
    * Flag parsing refactor; should mostly be invisible externally except that
      `plz clean cache` is now `plz clean --cache`.
    * Selective test running, eg. `plz test //test:my_test my_test_function`
    * --num_runs flag to force a test to run multiple times.
    * Some refactoring & bugfixes to require/provide.


Version 1.0.5
-------------

    * Fix crash in output code when window is very small vertically.
    * Support for Go 1.5. Seeing some issues that may be caused by it so
      not upgrading just yet.
    * Populate Java test class names correctly.
    * Display elapsed time for each test.
    * Fix for require / provide stuff still building unnecessary targets
      (they weren't depended on, but still got built).
    * Fix caching targets when run with plz cover.
    * Support for pseudo-targets like :all and ... with plz clean.


Version 1.0.4
-------------

    * Fix crash when running tests with --no_cache.
    * Nothing else, quick release to fix crasher.


Version 1.0.3
-------------

    * Test results are now cached & retrieved as other build artifacts.
    * Hashes are verified after retrieving from cache
    * Targets retrieved from cache are marked as unchanged when appropriate
    * Added a join_path builtin to the build language.
    * Remove all outputs after a build fails.
    * Attempt to import Python test modules ourselves before relying on unittest's
      detection, which produces misleading error messages if an ImportError is
      thrown while attempting to load the test.
    * Display depending target when we encounter a missing dependency.
    * If build fails due to an apparent dependency cycle, attempt to detect and
      print the cycle.


Version 1.0.2
-------------

    * Generate a python_library rule behind a python_binary to symlink
      the main .py file into plz-out. Fixes certain run issues.
    * Set ROOT_DIR variable while running tests.


Version 1.0.1
-------------

    * Support for skipping tests in go_test
    * Limit length of printed lines in interactive shell mode so
      output doesn't go berserk when window is too narrow.
      (it's still not great at being resized down but at least it
       stabilises after the window is reduced).
    * Fall back to attempting to copy files if hardlink fails.


Version 1.0
-----------

    * f1rst post!!!1!one
