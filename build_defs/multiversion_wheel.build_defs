def python_multiversion_wheel(name, version:str, urls:list, licences:list=None, visibility=None, hashes:list=None):
    """Downloads and combines multiple Python wheels.

    Note that python 2 does not support versioned object file names, so this can only work
    for one python 2 wheel at a time. For us that's not an issue since we only support 2.7
    (and these days that's nearly always what people are using, so often not a big deal).

    The wheels are downloaded from the given list of URLs Within those directories, and
    combined into a single wheel. Later files will overwrite earlier files however these
    common files should be identical if all the wheels are for the same version. The new
    files will be the platform specific files.

    Args:
      name (str): Name of the rule. Also doubles as the name of the package if package_name
            is not set.
      urls (list): List of wheels to download.
      licences (list): Licences that this wheel is subject to.
      hashes (list): List of hashes to verify the package against. These are applied to all
                     downloads so don't need to be in any specific order.
    """
    file_rules = [
        remote_file(
            name = '_%s#%d' % (name, i + 1),
            url = url,
            out = basename(url),
        ) for i, url in enumerate(urls)
    ]

    return build_rule(
        name = name,
        srcs = file_rules,
        outs = [name],
        cmd = 'for SRC in $SRCS; do $TOOL x -o $TMP_DIR $SRC; done',
        hashes = hashes,
        building_description = 'Extracting...',
        requires = ['py'],
        visibility = visibility,
        labels = ['whl:%s==%s' % (name, version)],
        tools = [CONFIG.JARCAT_TOOL],
        licences = licences,
    )
