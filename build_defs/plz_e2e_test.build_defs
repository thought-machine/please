# Rules for end-to-end tests on Please itself.

def plz_e2e_test(name, cmd, pre_cmd=None, expected_output=None, expected_failure=False,
                 expect_output_contains=None, expect_output_doesnt_contain=None,
                 deps=None, data=[], labels=None, sandbox=None,
                 expect_file_exists=None, expect_file_doesnt_exist=None):
    # Please isn't really designed to work this way (running a test against the entire source repo)
    # but we can make it do it and it's a convenient way of testing the tool itself.

    def _e2e_test_cmd(cmd):
        java_flag = '-o buildconfig.build_java:true' if CONFIG.get('BUILD_JAVA') else ''
        cmd = cmd.replace('plz ', '$(location //src:please) --nolock -o cache.rpcurl:"" %s -o cache.dirclean:false --log_file plz-out/log/%s.log ' % (java_flag, name))
        if expected_failure:
            test_cmd = '%s 2>&1 | tee output; if [ $? -eq 0 ]; then exit 1; fi; ' % cmd
        else:
            test_cmd = '%s 2>&1 | tee output && ' % cmd
        if expected_output and expect_output_contains:
            raise ValueError('Can only pass one of expected_output and expect_output_contains')
        elif expected_output:
            test_cmd += 'diff -au output $(location %s)' % expected_output
        elif expect_output_contains:
            test_cmd += 'if [ ! grep -v "%s" output; then cat output; exit 1 ]; fi' % expect_output_contains
        elif expect_output_doesnt_contain:
            test_cmd += 'if [ ! grep "%s" output; then cat output; exit 1 ]; fi' % expect_output_doesnt_contain
        elif expect_file_exists:
            test_cmd += 'if [ ! -f %s ]; then cat output; exit 1; fi' % expect_file_exists
        elif expect_file_doesnt_exist:
            test_cmd += 'if [ -f %s ]; then cat output; exit 1; fi' % expect_file_doesnt_exist
        else:
            test_cmd += 'true'
        if pre_cmd:
            test_cmd = pre_cmd + ' && ' + test_cmd
        return 'set -o pipefail; ' + test_cmd

    if expected_output:
        data += [expected_output]
    gentest(
        name = name,
        test_cmd = {
            'opt': _e2e_test_cmd(cmd),
            'dbg': _e2e_test_cmd(cmd.replace('plz ', 'plz -c dbg ')),
            'cover': _e2e_test_cmd(cmd.replace('plz ', 'plz -c cover ')),
        },
        data = data + ['//src:please'],
        deps = deps,
        labels = ['e2e'] + (labels or []),
        no_test_output = True,
        sandbox = None,
    )
