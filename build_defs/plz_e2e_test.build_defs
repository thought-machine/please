# Rules for end-to-end tests on Please itself.

def plz_e2e_test(name, cmd, pre_cmd=None, expected_output=None, expected_failure=False,
                 expect_output_contains=None, expect_output_doesnt_contain=None,
                 deps=None, data=None, labels=None,
                 expect_file_exists=None, expect_file_doesnt_exist=None):
    # Please isn't really designed to work this way (running a test against the entire source repo)
    # but we can make it do it and it's a convenient way of testing the tool itself.
    cmd = cmd.replace('plz', '$(location //src:please) --nolock --log_file plz-out/log/%s.log' % name)
    data = (data or []) + ['//src:please', '//src:please_parser_python2']
    if expected_failure:
        test_cmd = '%s 2>&1 | tee output; if [ $? -eq 0 ]; then exit 1; fi; ' % cmd
    else:
        test_cmd = '%s 2>&1 | tee output && ' % cmd
    if expected_output and expect_output_contains:
        raise ValueError('Can only pass one of expected_output and expect_output_contains')
    elif expected_output:
        test_cmd += 'diff -au output $(location %s)' % expected_output
        data.append(expected_output)
    elif expect_output_contains:
        test_cmd += 'if [ ! grep -v "%s" output; then cat output; exit 1 ]; fi' % expect_output_contains
    elif expect_output_doesnt_contain:
        test_cmd += 'if [ ! grep "%s" output; then cat output; exit 1 ]; fi' % expect_output_doesnt_contain
    elif expect_file_exists:
        test_cmd += 'if [ ! -f %s ]; then cat output; exit 1; fi' % expect_file_exists
    elif expect_file_doesnt_exist:
        test_cmd += 'if [ -f %s ]; then cat output; exit 1; fi' % expect_file_doesnt_exist
    else:
        test_cmd += 'true'
    if pre_cmd:
        test_cmd = pre_cmd + ' && ' + test_cmd

    gentest(
        name = name,
        test_cmd='set -o pipefail; ' + test_cmd,
        data = data,
        deps = deps,
        labels = ['e2e'] + (labels or []),
        no_test_output = True,
    )
