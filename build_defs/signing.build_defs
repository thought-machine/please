"""Build rules for signing releases using GPG."""


def signed_tarball(name:str, srcs:list, out:str, subdir:str, xzip:bool=False, visibility=None):
    """Creates a signed tarball.

    All arguments are passed through to tarball.

    This will create two rules, one with the expected name that is the tarball, and one with
    a _signed suffix that contains the detached .asc file.
    """
    tar_rule = tarball(
        name = name,
        srcs = srcs,
        out = out,
        subdir = subdir,
        xzip = xzip,
        visibility = visibility,
    )
    return detached_signature(
        name = name + '_signed',
        src = tar_rule,
        out = out + '.asc',
        visibility = visibility,
        labels = ['tar_asc', 'manual'],
    )


def detached_signature(name, src, out, labels=None, deps=None, visibility=None):
    """Creates an ASCII-armored detached signature of a single file.

    Note that you need to supply the passphrase for this to work. The best way to keep it from
    being logged is to pass it as an environment variable:
      PLZ_OVERRIDES=buildenv.gpg_password:54321 plz build //...
    or presumably getting your CI system to inject the password when needed.

    Args:
      name (str): Name of the rule.
      src (str): Input file or rule. If a rule, it must have only a single output.
      out (str): Name of output signature file.
      labels (list): Labels to apply to this rule.
      deps (list): Dependencies.
      visibility (list): Visibility of the rule.
    """
    return genrule(
        name = name,
        srcs = [src],
        outs = [out],
        tools = ['//tools/release_signer'],
        secrets = ['~/.keys/plz.gpg.asc'],
        cmd = '$TOOL -i $SRCS -k $SECRETS',
        deps = deps,
        visibility = visibility,
        labels = ['asc'] + (labels or []),
    )
