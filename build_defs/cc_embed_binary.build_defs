def cc_embed_binary(name:str, src:str, deps:list=[], visibility:list=None,
                    test_only:bool&testonly=False, namespace:str=None, _c:bool=False):
    """Build rule to embed an arbitrary binary file into a C++ library.

    You can depend on the output of this as though it were a cc_library rule.
    There are five functions available to access the data once compiled, all of which are
    prefixed with the file's basename:
      filename_start(): returns a const char* pointing to the beginning of the data.
      filename_end(): returns a const char* pointing to the end of the data.
      filename_size(): returns the length of the data in bytes.
      filename_start_nc(): returns a char* pointing to the beginning of the data.
                           This is a convenience wrapper using const_cast, you should not
                           mutate the contents of the returned pointer.
      filename_end_nc(): returns a char* pointing to the end of the data.
                         Again, don't mutate the contents of the pointer.
    You don't own the contents of any of these pointers so don't try to delete them :)

    Args:
      name (str): Name of the rule.
      src (str): Source file to embed.
      deps (list): Dependencies.
      visibility (list): Rule visibility.
      test_only (bool): If True, is only available to test rules.
      namespace (str): Allows specifying the namespace the symbols will be available in.
    """
    if src.startswith(':') or src.startswith('/'):
        deps += [src]
    namespace = namespace or CONFIG.DEFAULT_NAMESPACE
    # Just use the C (non-namespaced) version if no namespace is given.
    if not namespace:
        _c = True
    darwin = CONFIG.OS == 'darwin'
    hdr_contents = _C_HEADER_CONTENTS if _c else _CC_HEADER_CONTENTS
    hdr_rule = build_rule(
        name = name,
        tag = 'hdr',
        outs = [name + '.h'],
        srcs = [src],
        deps = deps,
        cmd = '; '.join([
            # This replacement roughly mimics what ld will do to munge it into a symbol name.
            'export ENCODED_FILENAME="${SRCS//[\\/\\.]/_}"',
            f'export BINARY_NAME="{name}"',
            f'export NAMESPACE="{namespace}"',
            f'echo "{hdr_contents}" > "$OUT"',
        ]),
        visibility = visibility,
        building_description = 'Writing header...',
        requires = ['cc'],
        test_only = test_only,
    )

    tools = {'jarcat': [CONFIG.JARCAT_TOOL], 'ar': [CONFIG.AR_TOOL]}
    if darwin:
        # OSX's ld doesn't support '--format binary', and this is the least fiddly
        # alternative. Requiring an additional tool is a bit suboptimal but probably
        # in the end easier than the alternatives.
        cmd = ' && '.join([
            'export ENCODED_FILENAME=${SRCS//[\\/\\.]/_}',
            f'echo "{_CC_DARWIN_ASM_CONTENTS}" > embedded.asm',
            '$TOOLS_ASM -fmacho64 embedded.asm -o ${OUTS/.a/.o}',
            '$TOOLS_JARCAT ar --srcs ${OUTS/.a/.o}',
            '$TOOLS_AR s "$OUTS"',
        ])
        tools['asm'] = [CONFIG.ASM_TOOL]
    else:
        cmd = '$TOOLS_LD -r --format binary -z noexecstack -m elf_$XARCH %s -o "${OUTS/.a/.o}" $SRC && $TOOLS_JARCAT ar --srcs "${OUTS/.a/.o}" && $TOOLS_AR s "$OUTS"' % CONFIG.DEFAULT_LDFLAGS
        tools['ld'] = [CONFIG.LD_TOOL]

    lib_rule = build_rule(
        name = name,
        tag = 'lib',
        srcs = [src],
        outs = ['lib%s.a' % name],
        deps = deps,
        cmd = cmd,
        visibility = visibility,
        building_description = 'Embedding...',
        requires = ['cc'],
        tools = tools,
        test_only = test_only,
    )
    return filegroup(
        name = name,
        srcs = [lib_rule, hdr_rule],
        visibility = visibility,
        test_only = test_only,
        provides = {
            'cc_hdrs': hdr_rule,
            'cc': lib_rule,
        },
    )


def c_embed_binary(name:str, src:str, deps:list=[], visibility:list=None,
                   test_only:bool&testonly=False):
    """Build rule to embed an arbitrary binary file into a C library.

    You can depend on the output of this as though it were a c_library rule.
    There are five functions available to access the data once compiled, all of which are
    prefixed with the file's basename:
      filename_start(): returns a const char* pointing to the beginning of the data.
      filename_end(): returns a const char* pointing to the end of the data.
      filename_size(): returns the length of the data in bytes.
      filename_start_nc(): returns a char* pointing to the beginning of the data.
                           This is a convenience wrapper using const_cast, you should not
                           mutate the contents of the returned pointer.
      filename_end_nc(): returns a char* pointing to the end of the data.
                         Again, don't mutate the contents of the pointer.
    You don't own the contents of any of these pointers so don't try to delete them :)

    Args:
      name (str): Name of the rule.
      src (str): Source file to embed.
      deps (list): Dependencies.
      visibility (list): Rule visibility.
      test_only (bool): If True, is only available to test rules.
    """
    return cc_embed_binary(
        name = name,
        src = src,
        deps = deps,
        visibility = visibility,
        test_only = test_only,
        _c = True,
    )


_CC_HEADER_CONTENTS = """\
#ifdef __cplusplus
namespace ${NAMESPACE} {
extern \\"C\\" {
#endif  // __cplusplus
extern const char _binary_${ENCODED_FILENAME}_start[];
extern const char _binary_${ENCODED_FILENAME}_end[];
#ifdef __cplusplus
}
#endif  // __cplusplus

// Nicer aliases.
static inline const char* ${BINARY_NAME}_start() {
  return _binary_${ENCODED_FILENAME}_start;
}
static inline const char* ${BINARY_NAME}_end() {
  return _binary_${ENCODED_FILENAME}_end;
}
static inline unsigned long ${BINARY_NAME}_size() {
  return _binary_${ENCODED_FILENAME}_end - _binary_${ENCODED_FILENAME}_start;
}
static inline char* ${BINARY_NAME}_start_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_start);
}
static inline char* ${BINARY_NAME}_end_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_end);
}
#ifdef __cplusplus
}  // namespace ${NAMESPACE}
#endif  // __cplusplus
"""

_C_HEADER_CONTENTS = """\
extern const char _binary_${ENCODED_FILENAME}_start[];
extern const char _binary_${ENCODED_FILENAME}_end[];

static inline const char* ${BINARY_NAME}_start() {
  return _binary_${ENCODED_FILENAME}_start;
}
static inline const char* ${BINARY_NAME}_end() {
  return _binary_${ENCODED_FILENAME}_end;
}
static inline unsigned long ${BINARY_NAME}_size() {
  return _binary_${ENCODED_FILENAME}_end - _binary_${ENCODED_FILENAME}_start;
}
static inline char* ${BINARY_NAME}_start_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_start);
}
static inline char* ${BINARY_NAME}_end_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_end);
}
"""

# We duplicate the symbols with _ and __ preceding, the compiler fails if _ is not
# present and the linker fails if __ isn't.
_CC_DARWIN_ASM_CONTENTS = r"""
bits 64

section .rodata

global _binary_${ENCODED_FILENAME}_start
global __binary_${ENCODED_FILENAME}_start
global _binary_${ENCODED_FILENAME}_end
global __binary_${ENCODED_FILENAME}_end
global _binary_${ENCODED_FILENAME}_size
global __binary_${ENCODED_FILENAME}_size

_binary_${ENCODED_FILENAME}_start:    incbin \"${SRCS}\"
__binary_${ENCODED_FILENAME}_start:   incbin \"${SRCS}\"
_binary_${ENCODED_FILENAME}_end:
__binary_${ENCODED_FILENAME}_end:
_binary_${ENCODED_FILENAME}_size:     dd \\$-_binary_${ENCODED_FILENAME}_start
__binary_${ENCODED_FILENAME}_size:    dd \\$-_binary_${ENCODED_FILENAME}_start
"""


CONFIG.setdefault('ASM_TOOL', 'nasm')
CONFIG.setdefault('DEFAULT_NAMESPACE', '')
