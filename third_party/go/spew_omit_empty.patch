diff --git a/config.go b/config.go
index 2e3d22f..2245869 100644
--- a/spew/config.go
+++ b/spew/config.go
@@ -76,6 +76,13 @@ type ConfigState struct {
 	// data structures in tests.
 	DisableCapacities bool

+	// DisableTypes specifies whether to disable the printing of types.
+	DisableTypes bool
+
+	// DisableLengths specifies whether to disable the printing of lengths.
+	// This also disables the printing of capacities.
+	DisableLengths bool
+
 	// ContinueOnMethod specifies whether or not recursion should continue once
 	// a custom error or Stringer interface is invoked.  The default, false,
 	// means it will print the results of invoking the custom error or Stringer
@@ -98,6 +105,10 @@ type ConfigState struct {
 	// be spewed to strings and sorted by those strings.  This is only
 	// considered if SortKeys is true.
 	SpewKeys bool
+
+	// OmitEmpty specifies that empty struct fields should be omitted.
+	// Empty fields are any that have the zero value for their type.
+	OmitEmpty bool
 }

 // Config is the active configuration of the top-level functions.
@@ -301,6 +312,7 @@ func (c *ConfigState) convertArgs(args []interface{}) (formatters []interface{})
 // 	DisablePointerMethods: false
 // 	ContinueOnMethod: false
 // 	SortKeys: false
+// 	OmitEmpty: false
 func NewDefaultConfig() *ConfigState {
 	return &ConfigState{Indent: " "}
 }
diff --git a/doc.go b/doc.go
index aacaac6..565d4d2 100644
--- a/spew/doc.go
+++ b/spew/doc.go
@@ -100,6 +100,13 @@ The following configuration options are available:
 		capacities for arrays, slices, maps and channels. This is useful when
 		diffing data structures in tests.

+	* DisableTypes
+		DisableTypes specifies whether to disable the printing of types.
+
+	* DisableLengths
+		DisableLengths specifies whether to disable the printing of lengths.
+		This also disables the printing of capacities.
+
 	* ContinueOnMethod
 		Enables recursion into types after invoking error and Stringer interface
 		methods. Recursion after method invocation is disabled by default.
diff --git a/dump.go b/dump.go
index f78d89f..5aaa806 100644
--- a/spew/dump.go
+++ b/spew/dump.go
@@ -123,10 +123,12 @@ func (d *dumpState) dumpPtr(v reflect.Value) {
 	}

 	// Display type information.
-	d.w.Write(openParenBytes)
-	d.w.Write(bytes.Repeat(asteriskBytes, indirects))
-	d.w.Write([]byte(ve.Type().String()))
-	d.w.Write(closeParenBytes)
+	if !d.cs.DisableTypes {
+		d.w.Write(openParenBytes)
+		d.w.Write(bytes.Repeat(asteriskBytes, indirects))
+		d.w.Write([]byte(ve.Type().String()))
+		d.w.Write(closeParenBytes)
+	}

 	// Display pointer information.
 	if !d.cs.DisablePointerAddresses && len(pointerChain) > 0 {
@@ -266,37 +268,41 @@ func (d *dumpState) dump(v reflect.Value) {
 	// Print type information unless already handled elsewhere.
 	if !d.ignoreNextType {
 		d.indent()
-		d.w.Write(openParenBytes)
-		d.w.Write([]byte(v.Type().String()))
-		d.w.Write(closeParenBytes)
-		d.w.Write(spaceBytes)
+		if !d.cs.DisableTypes {
+			d.w.Write(openParenBytes)
+			d.w.Write([]byte(v.Type().String()))
+			d.w.Write(closeParenBytes)
+			d.w.Write(spaceBytes)
+		}
 	}
 	d.ignoreNextType = false

 	// Display length and capacity if the built-in len and cap functions
 	// work with the value's kind and the len/cap itself is non-zero.
-	valueLen, valueCap := 0, 0
-	switch v.Kind() {
-	case reflect.Array, reflect.Slice, reflect.Chan:
-		valueLen, valueCap = v.Len(), v.Cap()
-	case reflect.Map, reflect.String:
-		valueLen = v.Len()
-	}
-	if valueLen != 0 || !d.cs.DisableCapacities && valueCap != 0 {
-		d.w.Write(openParenBytes)
-		if valueLen != 0 {
-			d.w.Write(lenEqualsBytes)
-			printInt(d.w, int64(valueLen), 10)
+	if !d.cs.DisableLengths {
+		valueLen, valueCap := 0, 0
+		switch v.Kind() {
+		case reflect.Array, reflect.Slice, reflect.Chan:
+			valueLen, valueCap = v.Len(), v.Cap()
+		case reflect.Map, reflect.String:
+			valueLen = v.Len()
 		}
-		if !d.cs.DisableCapacities && valueCap != 0 {
+		if valueLen != 0 || !d.cs.DisableCapacities && valueCap != 0 {
+			d.w.Write(openParenBytes)
 			if valueLen != 0 {
-				d.w.Write(spaceBytes)
+				d.w.Write(lenEqualsBytes)
+				printInt(d.w, int64(valueLen), 10)
+			}
+			if !d.cs.DisableCapacities && valueCap != 0 {
+				if valueLen != 0 {
+					d.w.Write(spaceBytes)
+				}
+				d.w.Write(capEqualsBytes)
+				printInt(d.w, int64(valueCap), 10)
 			}
-			d.w.Write(capEqualsBytes)
-			printInt(d.w, int64(valueCap), 10)
+			d.w.Write(closeParenBytes)
+			d.w.Write(spaceBytes)
 		}
-		d.w.Write(closeParenBytes)
-		d.w.Write(spaceBytes)
 	}

 	// Call Stringer/error interfaces if they exist and the handle methods flag
@@ -413,12 +419,16 @@ func (d *dumpState) dump(v reflect.Value) {
 			vt := v.Type()
 			numFields := v.NumField()
 			for i := 0; i < numFields; i++ {
+				vf := v.Field(i)
+				if d.cs.OmitEmpty && isZero(vf) {
+					continue
+				}
 				d.indent()
 				vtf := vt.Field(i)
 				d.w.Write([]byte(vtf.Name))
 				d.w.Write(colonSpaceBytes)
 				d.ignoreNextIndent = true
-				d.dump(d.unpackValue(v.Field(i)))
+				d.dump(d.unpackValue(vf))
 				if i < (numFields - 1) {
 					d.w.Write(commaNewlineBytes)
 				} else {
@@ -507,3 +517,26 @@ get the formatted result as a string.
 func Dump(a ...interface{}) {
 	fdump(&Config, os.Stdout, a...)
 }
+
+// isZero is a helper function that checks whether a reflect.Value has the zero value for its type.
+func isZero(v reflect.Value) bool {
+	switch v.Kind() {
+	case reflect.Array, reflect.Map, reflect.Slice, reflect.String:
+		return v.Len() == 0
+	case reflect.Bool:
+		return !v.Bool()
+	case reflect.Int, reflect.Int8, reflect.Int16, reflect.Int32, reflect.Int64:
+		return v.Int() == 0
+	case reflect.Uint, reflect.Uint8, reflect.Uint16, reflect.Uint32, reflect.Uint64, reflect.Uintptr:
+		return v.Uint() == 0
+	case reflect.Float32, reflect.Float64:
+		return v.Float() == 0
+	case reflect.Interface, reflect.Ptr, reflect.Chan:
+		return v.IsNil()
+	case reflect.UnsafePointer:
+		return v.Pointer() == 0
+	case reflect.Complex64, reflect.Complex128:
+		return v.Complex() == 0
+	}
+	return false
+}
