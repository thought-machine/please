"""Build rules for compiling protocol buffers & gRPC service stubs.

Note that these are some of the most complex of our built-in build rules,
because of their cross-language nature. Each proto_library rule declares a set of
sub-rules to run protoc & the appropriate java_library, go_library rules etc. Users
shouldn't worry about those sub-rules and just declare a dependency directly on
the proto_library rule to get its appropriate outputs.

It is possible to add extra languages to these for generation. This is accomplished
via the 'languages' argument; this can be simply a list of languages to build, but
can also be a mapping of language name -> definition of how to build it. The definition
should be the return value of proto_language.
"""

_DEFAULT_GRPC_LABELS = ['grpc']


def proto_library(name:str, srcs:list, deps:list=[], visibility:list=None, labels:list&features&tags=[],
                  languages:list|dict=None, test_only:bool&testonly=False, root_dir:str='', protoc_flags:list=[]):
    """Compile a .proto file to generated code for various languages.

    Args:
      name (str): Name of the rule
      srcs (list): Input .proto files.
      deps (list): Dependencies
      visibility (list): Visibility specification for the rule.
      labels (list): List of labels to apply to this rule.
      languages (list | dict): List of languages to generate rules for, chosen from the set {cc, py, go, java, js}.
                               Alternatively, a dict mapping the language name to a definition of how to build it
                               (see proto_language for more details of the values).
      test_only (bool): If True, can only be used in test rules.
      root_dir (str): The directory that the protos are compiled relative to. Useful if your
                      proto files have import statements that are not relative to the repo root.
      protoc_flags (list): Additional flags to pass to protoc. Note that these are inherited by
                           further rules that depend on this one (because in nearly all cases that
                           will be necessary for them to build too).
    """
    languages = _merge_dicts(languages or CONFIG.PROTO_LANGUAGES, proto_languages())
    lang_plugins = sorted(languages.items())
    plugins = [plugin for _, plugin in lang_plugins]

    # TODO(pebers): genericise this bit?
    if 'go' in languages:
        base_path = get_base_path()
        diff_pkg = basename(base_path) != name
        if CONFIG.GO_IMPORT_PATH:
            base_path = join_path(CONFIG.GO_IMPORT_PATH, base_path)
        labels += [f'proto:go-map: {base_path}/{src}={base_path}/{name}' for src in srcs
                   if not src.startswith(':') and not src.startswith('/') and
                   (src != (name + '.proto') or len(srcs) > 1 or diff_pkg)]

    # Plugins can declare their own pre-build functions. If there are any, we need to apply them all in sequence.
    pre_build_functions = [plugin['pre_build'] for plugin in plugins if plugin['pre_build']]
    pre_build_functions += [_collect_transitive_labels]
    pre_build = lambda rule: [fn(rule) for fn in pre_build_functions]
    protoc_rules = {lang: _protoc_rule(name, srcs, deps, lang, plugin, protoc_flags, root_dir, pre_build, labels, test_only,
                                       visibility) for lang, plugin in lang_plugins}

    provides = {'proto': f':_{name}#proto'}
    for language, plugin in lang_plugins:
        lang_name = f'_{name}#{language}'
        provides[language] = plugin['func'](
            name = lang_name,
            srcs = [protoc_rules[language]],
            deps = deps + plugin['deps'],
            test_only = test_only
        ) or (':' + lang_name)
        # Add any provided labels from the generated rule above to the final output rule
        for p in plugin.provides:
            tag_name = f'{language}_{p}'
            current_package = package_name()
            # TODO(jpoole): the provide stuff didn't really work because the mapping isn't always straight forward
            # We probably need to make this a map
            if p == 'srcs' and language == 'go':
                provides['go_src'] = f'//{current_package}:_{name}#go_srcs'
            else:
                provides[tag_name] = f'//{current_package}:_{name}#{tag_name}'

    # This simply collects the sources, it's used for other proto_library rules to depend on.
    filegroup(
        name = f'_{name}#proto',
        srcs = srcs,
        visibility = visibility,
        exported_deps = deps,
        labels = labels,
        requires = ['proto'],
        output_is_complete = False,
        test_only = test_only,
    )
    # This is the final rule that directs dependencies to the appropriate language.
    return filegroup(
        name = name,
        deps = provides.values(),
        provides = provides,
        visibility = visibility,
        labels = labels,
        test_only = test_only,
    )


def grpc_library(name:str, srcs:list, deps:list=None, visibility:list=None, languages:list|dict=None,
                 labels:list&features&tags=[], test_only:bool&testonly=False, root_dir:str='', protoc_flags:list=None):
    """Defines a rule for a grpc library.

    Args:
      name (str): Name of the rule
      srcs (list): Input .proto files.
      deps (list): Dependencies (other grpc_library or proto_library rules)
      visibility (list): Visibility specification for the rule.
      languages (list | dict): List of languages to generate rules for, chosen from the set {cc, py, go, java}.
                               Alternatively, a dict mapping the language name to a definition of how to build it
                               (see proto_language for more details of the values).
      labels (list): List of labels to apply to this rule.
      test_only (bool): If True, this rule can only be used by test rules.
      root_dir (str): The directory that the protos are compiled relative to. Useful if your
                      proto files have import statements that are not relative to the repo root.
      protoc_flags (list): Additional flags to pass to protoc.
    """
    return proto_library(
        name = name,
        srcs = srcs,
        deps = deps,
        languages = _merge_dicts(languages or CONFIG.PROTO_LANGUAGES, grpc_languages()),
        visibility = visibility,
        labels = labels + _DEFAULT_GRPC_LABELS,
        test_only = test_only,
        root_dir = root_dir,
        protoc_flags = protoc_flags,
    )


def _go_path_mapping(grpc):
    """Used to update the Go path mapping; by default it doesn't really import in the way we want."""
    grpc_plugin = 'plugins=grpc,' if grpc else ''
    def _map_go_paths(rule_name):
        mapping = ',M'.join(get_labels(rule_name, 'proto:go-map:'))
        cmd = get_command(rule_name)
        new_cmd = cmd.replace('--go_out=paths=source_relative:', f'--go_out=paths=source_relative,{grpc_plugin}M{mapping}:')
        set_command(rule_name, new_cmd)
    return _map_go_paths


def proto_language(language:str, extensions:list|dict=None, func:function, use_file_names:bool=True, protoc_flags:list=[],
                   tools: list | dict = None, deps:list=[], pre_build:function=None, proto_language:str='', provides:list=[]):
    """Returns the definition of how to build a particular language for proto_library or grpc_library.

    Args:
      language (str): Name of the language (as we would name it).
      extensions (list | dict): These are no longer needed. This parameter is only here for backwards compatibilty.
      func (function): Function defining how to build the rule. It will receive the following arguments:
            name: Suggested name of the rule.
            srcs: Source files, as generated by protoc.
            deps: Suggested dependencies.
            test_only: True if the original rule was marked as test_only.
            It should return the name of any rule that it wants added to the final list of provides.
      use_file_names (bool): True if the output file names are normally predictable.
            This is the case for most languages but not e.g. Java where they depend on the
            declarations in the proto file. If False we'll attempt to detect them.
      protoc_flags (list): Additional flags for the protoc invocation for this rule.
      tools (list): Additional tools to apply to this rule.
      deps (list): Additional dependencies to apply to this rule.
      pre_build (function): Definition of pre-build function to apply to this language.
      proto_language (str): Name of the language (as protoc would name it). Defaults to the same as language.
      provides (list[str]): Any tags from the rule generated by func that should be provided by the final proto_library
                            rule.
    """
    return {
        'language': language,
        'proto_language': proto_language or language,
        'extensions': {language: extensions} if isinstance(extensions, list) else extensions,
        'func': func,
        'use_file_names': use_file_names,
        'protoc_flags': protoc_flags,
        'tools': tools,
        'deps': deps,
        'pre_build': pre_build,
        'provides': provides,
    }


def _parent_rule(name):
    """Returns the parent rule, i.e. strips the leading _ and trailing #hashtag."""
    before, _, _ = name.partition('#')
    return before.lstrip('_')



def _merge_dicts(lhs_dict, rhs_dict):
    """Merges dictionary a into dictionary b, overwriting where a's values are not None."""
    if not isinstance(lhs_dict, dict):
        return {lang: rhs_dict[lang] for lang in lhs_dict}  # Languages can be passed as just a list.
    return {k: v or rhs_dict[k] for k, v in lhs_dict.items()}


def _collect_transitive_labels(rule):
    """Defines a pre-build function that updates a build command with transitive protoc flags."""
    labels = get_labels(rule, 'protoc:')
    if labels:
        cmd = get_command(rule)
        set_command(rule, cmd.replace('$TOOLS_PROTOC ', '$TOOLS_PROTOC %s ' % ' '.join(labels)))

def filter_srcs(name, srcs, extension):
    """Filters re-exports its srcs filtering on the provided extension"""
    return build_rule(
        name = name,
        srcs = srcs,
        cmd = '\n'.join([
            'mkdir _out && for i in $SRCS; do ',
            f'   if [[ "$i" == *.{extension} ]]; then ',
            '        mkdir -p _out/$(dirname $i) ',
            '        mv $i _out/$i ',
            '     fi ',
            'done ']),
        output_dirs = ["_out/**"],
    )

def proto_languages():
    """Returns the known set of proto language definitions.

    Due to technical reasons this can't just be a global (if you must know: the lambdas need
    to bind to the set of globals for the BUILD file, not the set when we load the rules).
    TODO(pebers): This seems a bit ugly and might be slow if we're creating a lot of temporaries.
                  Find a way to persist these...
    """
    return {
        'cc': proto_language(
            language = 'cc',
            proto_language = 'cpp',
            func = lambda name, srcs, deps, test_only: cc_library(
                name = name,
                srcs = srcs,
                hdrs = [filter_srcs(name = name + '_protoc_hdrs', srcs = [srcs[0]], extension = "h")],
                deps = deps,
                test_only = test_only,
                pkg_config_libs = ['protobuf'],
                compiler_flags = ['-I$PKG_DIR'],
            ),
            provides=["hdrs"],
            protoc_flags = ['--cpp_out="$OUT_DIR"'],
        ),
        'java': proto_language(
            language = 'java',
            use_file_names = False,
            func = lambda name, srcs, deps, test_only: java_library(
                name = name,
                srcs = srcs,
                exported_deps = deps,
                test_only = test_only,
                labels = ['proto'],
            ),
            protoc_flags = ['--java_out="$OUT_DIR"'],
            deps = [CONFIG.PROTO_JAVA_DEP],
        ),
        'go': proto_language(
            language = 'go',
            func = lambda name, srcs, deps, test_only: go_library(
                name = name,
                srcs = srcs,
                out = _parent_rule(name) + '.a',
                deps = deps,
                test_only = test_only,
            ),
            protoc_flags = ['--go_out=paths=source_relative:"$OUT_DIR"', '--plugin=protoc-gen-go="`which $TOOLS_GO`"'],
            tools = [CONFIG.PROTOC_GO_PLUGIN],
            deps = [CONFIG.PROTO_GO_DEP],
            pre_build = _go_path_mapping(False),
            provides=["srcs"],
        ),
        'js': proto_language(
            language = 'js',
            func = lambda name, srcs, deps, test_only: filegroup(
                name = name,
                srcs = srcs,
                deps = deps,
                test_only = test_only,
                requires = ['js'],
                output_is_complete = False,
            ),
            protoc_flags = ['--js_out=import_style=commonjs,binary:"$OUT_DIR"'],
            deps = [CONFIG.PROTO_JS_DEP],
        ),
        'py': proto_language(
            language = 'py',
            proto_language = 'python',
            func = python_library,
            protoc_flags = ['--python_out="$OUT_DIR"'],
            deps = [CONFIG.PROTO_PYTHON_DEP],
        ),
    }

def grpc_languages():
    """Returns the predefined set of gRPC languages."""
    return {
        'cc': proto_language(
            language = 'cc',
            proto_language = 'cpp',
            func = lambda name, srcs, deps, test_only: cc_library(
                name = name,
                srcs = srcs,
                hdrs = [filter_srcs(name = name + '_protoc_hdrs', srcs = [srcs[0]], extension = "h")],
                deps = deps,
                test_only = test_only,
                pkg_config_libs = ['grpc++', 'grpc', 'protobuf'],
                compiler_flags = ['-I$PKG_DIR', '-Wno-unused-parameter'],  # Generated gRPC code is not robust to this.
            ),
            protoc_flags = ['--cpp_out="$OUT_DIR"', '--plugin=protoc-gen-grpc-cc="`which $TOOLS_CC`"', '--grpc-cc_out="$OUT_DIR"'],
            tools = [CONFIG.GRPC_CC_PLUGIN],
            provides=['hdrs'],
        ),
        'py': proto_language(
            language = 'py',
            proto_language = 'python',
            func = python_library,
            protoc_flags = ['--python_out="$OUT_DIR"', '--plugin=protoc-gen-grpc-python="`which $TOOLS_PY`"', '--grpc-python_out="$OUT_DIR"'],
            tools = [CONFIG.GRPC_PYTHON_PLUGIN],
            deps = [CONFIG.PROTO_PYTHON_DEP, CONFIG.GRPC_PYTHON_DEP],
        ),
        'java': proto_language(
            language = 'java',
            use_file_names = False,
            func = lambda name, srcs, deps, test_only: java_library(
                name = name,
                srcs = srcs,
                exported_deps = deps,
                test_only = test_only,
                labels = ['proto'],
            ),
            protoc_flags = ['--java_out="$OUT_DIR"', '--plugin=protoc-gen-grpc-java="`which $TOOLS_JAVA`"', '--grpc-java_out="$OUT_DIR"'],
            tools = [CONFIG.GRPC_JAVA_PLUGIN],
            deps = [CONFIG.GRPC_JAVA_DEP, CONFIG.PROTO_JAVA_DEP],
        ),
        'go': proto_language(
            language = 'go',
            func = lambda name, srcs, deps, test_only: go_library(
                name = name,
                srcs = srcs,
                out = _parent_rule(name) + '.a',
                deps = deps,
                test_only = test_only,
            ),
            protoc_flags=[
                '--grpc-go_out="$OUT_DIR"',
                '--go_out="$OUT_DIR"',
                '--plugin=protoc-gen-go="`which $TOOLS_GO`"',
                '--plugin=protoc-gen-grpc-go="`which $TOOLS_GRPC_GO`"',
            ] if CONFIG.GRPC_GO_PLUGIN else [
                '--go_out=paths=source_relative:"$OUT_DIR"',
                '--plugin=protoc-gen-go="`which $TOOLS_GO`"',
            ],
            tools = {
                'go': [CONFIG.PROTOC_GO_PLUGIN],
                'grpc_go': [CONFIG.GRPC_GO_PLUGIN],
            } if CONFIG.GRPC_GO_PLUGIN else [
                CONFIG.PROTOC_GO_PLUGIN,
            ],
            deps = [CONFIG.PROTO_GO_DEP, CONFIG.GRPC_GO_DEP],
            pre_build = _go_path_mapping(True),
            provides=['srcs'],
        ),
        # We don't really support grpc-js right now, so this is the same as proto-js.
        'js': proto_language(
            language = 'js',
            func = lambda name, srcs, deps, test_only: filegroup(
                name = name,
                srcs = srcs,
                deps = deps,
                test_only = test_only,
                requires = ['js'],
                output_is_complete = False,
            ),
            protoc_flags = ['--js_out=import_style=commonjs,binary:"$OUT_DIR"'],
            deps = [CONFIG.PROTO_JS_DEP],
        ),
    }


def _protoc_rule(name, srcs, deps, language, plugin, protoc_flags, root_dir, pre_build, labels, test_only, visibility):
    tools = {'protoc': [CONFIG.PROTOC_TOOL]}
    plugin_tools = plugin['tools']
    if isinstance(plugin_tools, dict):
        for name, value in plugin_tools.items():
            tools[name] = value
    else:
        tools[language] = plugin_tools

    flags = [' '.join(plugin['protoc_flags'])]

    out_dir = "out_dir"
    language_out_dir = plugin['language']

    cmd = f'$TOOLS_PROTOC ' + ' '.join(flags)
    if root_dir:
        cmd = f'cd {root_dir}; {cmd} ${{SRCS//{root_dir}\\//}} && cd "$TMP_DIR"'
    else:
        cmd += ' ${SRCS}'

    cmd = f'(export OUT_DIR=$TMP_DIR/{language_out_dir} && {cmd})'

    cmd += f' && (mv -f {language_out_dir}/${{PKG_DIR}}/* {out_dir}; true) && (mv -f {language_out_dir}/* {out_dir}; true)'

    cmd = f'mkdir out_dir && mkdir {language_out_dir} && {cmd}'

    # protoc_flags are applied transitively to dependent rules via labels.
    labels += ['protoc:' + flag for flag in protoc_flags]
    return build_rule(
        name = name,
        tag = f'protoc_{language}',
        srcs = srcs,
        output_dirs = [f'{out_dir}/**'],
        cmd = cmd,
        deps = deps,
        tools = tools,
        requires = ['proto', language],
        pre_build = pre_build,
        labels = labels,
        needs_transitive_deps = True,
        test_only = test_only,
        visibility = visibility,
    )

def protoc_binary(name, version, hashes=None, deps=None, visibility=None):
    """Downloads a precompiled protoc binary.

    You will obviously need to choose a version that is available on Github - there aren't
    necessarily protoc downloads for every protobuf release.

    Args:
      name (str): Name of the rule
      version (str): Version of protoc to download (e.g. '3.4.0').
      hashes (list): Hashes to verify the download against.
      deps (list): Any other dependencies
      visibility (list): Visibility of the rule.
    """
    if CONFIG.HOSTOS == 'darwin':
        HOSTOS='osx'
    else:
        HOSTOS=CONFIG.HOSTOS

    if CONFIG.HOSTARCH == 'amd64':
        HOSTARCH = 'x86_64'
    elif CONFIG.HOSTARCH == 'x86':
        HOSTARCH = 'x86_32'
    elif CONFIG.HOSTARCH == 'arm64':
        HOSTARCH = 'aarch_64'
    else:
        HOSTARCH = CONFIG.HOSTARCH

    download_rule = remote_file(
        name = name,
        _tag = 'download',
        url = f'https://github.com/protocolbuffers/protobuf/releases/download/v{version}/protoc-{version}-{HOSTOS}-{HOSTARCH}.zip',
        out = f'protoc-{version}.zip',
        hashes = hashes,
        deps = deps,
    )
    # The well-known types are included in the same zipfile.
    wkt = build_rule(
        name = name,
        tag = 'wkt',
        srcs = [download_rule],
        outs = ['google'],
        tools = [CONFIG.JARCAT_TOOL],
        cmd = '$TOOL x $SRCS --strip_prefix include',
        labels = [
            'protoc:-I"$TMP_DIR"/' + package_name(),
            'protoc:-I"$TMP_DIR"',
        ],
    )
    return genrule(
        name = name,
        srcs = [download_rule],
        outs = ['protoc'],
        tools = [CONFIG.JARCAT_TOOL],
        binary = True,
        cmd = '$TOOL x $SRCS bin/protoc',
        visibility = visibility,
        provides = {'proto': wkt},
    )
