"""Miscellaneous rules that aren't language-specific."""


def genrule(name:str, cmd:str|list|dict, srcs:list|dict=None, out:str=None, outs:list|dict=None, deps:list=None,
            exported_deps:list=None, labels:list&features&tags=None, visibility:list=None,
            building_description:str='Building...', data:list=None, hashes:list=None, timeout:int=0, binary:bool=False,
            sandbox:bool=None, needs_transitive_deps:bool=False, output_is_complete:bool=True,
            test_only:bool&testonly=False, secrets:list|dict=None, requires:list=None, provides:dict=None,
            pre_build:function=None, post_build:function=None, tools:str|list|dict=None, pass_env:list=None,
            local:bool=False, output_dirs:list=[], exit_on_error:bool=CONFIG.EXIT_ON_ERROR, entry_points:dict={},
            env:dict={}, optional_outs:list=[]):
    """A general build rule which allows the user to specify a command.

    Args:
      name (str): Name of the rule
      cmd (str | dict | list): Command to run.
           If given as a string, it's a single command that's used always (the most common case).
           If given as a list, it's a sequence of commands run one after another if the
           preceding command is successful (i.e. it's equivalent to ' && '.join(cmd)).
           If given as a dict, the keys correspond to the build config to run and the values
           are the command to run in that config. The typical use case here is 'opt' vs. 'dbg'
           but arbitrary names can be given and specified with `plz build -c name`.
           See https://please.build/build_rules.html for more information about the sequence
           replacements and environment variables that are made available to this rule.
      srcs (list | dict): Sources of this rule. Can be a list of files or rules, or a dict of names
                          to lists. In the latter case they can be accessed separately which is useful
                          to be able to refer to them distinctly in the command.
      outs (list | dict): Outputs of this rule. All are files relative to this package.
                          If given as a dict, it declares a series of named outputs which work
                          similarly to named srcs; they have separate environment variables and
                          can be accessed directly by other rules.
      out (str): A single output of this rule, as a string. Discouraged in favour of 'outs'.
      data (list): Runtime data for this rule.
      deps (list): Dependencies of this rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      tools (str | list | dict): Tools used to build this rule; similar to srcs but are not copied to the
                           temporary build directory. Should be accessed via $(exe //path/to:tool)
                           or similar.
                           Entries that are not build labels are assumed to be system-level commands
                           and resolved within the path given in the config file (note that the
                           value of $PATH in the outside environment is not propagated to the build
                           rule).
                           If tools is given as a dict then the keys of the dict name the various
                           tools and they can be accessed with $TOOLS_KEY.
      secrets (list | dict): Files containing secrets (credentials etc) used to build this rule.
           Can be a list of secrets, or a dict to lists. In the latter case they can be accessed
           separately which is useful to be able to refer to them distinctly in the command. These
           are all absolute paths (beginning with / or ~) and are not copied to the build directory.
           They can be accessed through the environment variable $SECRETS (named secrets can be
           addressed individually as $SECRETS_<NAME_OF_SECRET>). They don't contribute to the key
           used to retrieve outputs from the cache; this means it's possible for one machine to
           build a target with the secret and then share the output with others. That also implies
           that secrets are things like credentials or signing keys and shouldn't be copied directly
           to outputs, otherwise they might become more widely known.
      labels (list): Labels to apply to this rule.
      visibility (list): Visibility declaration of this rule
      building_description (str): Description to display to the user while the rule is building.
      hashes (list): List of hashes; if given the outputs must match one of these. They can be
              optionally preceded by their method. Currently the only supported method is sha1.
      timeout (int): Maximum time in seconds this rule can run for before being killed.
      binary (bool): True to mark a rule that produces a runnable output. Its output will be placed into
              plz-out/bin instead of plz-out/gen and can be run with 'plz run'. Binary rules
              can only have a single output.
      sandbox (bool): If True, the build action is sandboxed within a separate network and process
                      namespace. Only works on Linux and requires plz_sandbox to be installed
                      separately.
                      If False, it opts the target out of sandboxing when that is turned on.
      needs_transitive_deps (bool): If True, all transitive dependencies of the rule will be made
                             available to it when it builds (although see below...). By default
                             rules only get their immediate dependencies.
      output_is_complete (bool): If this is true then the rule blocks downwards searches of transitive
                          dependencies by other rules (ie. it will be available to them, but not
                          its dependencies as well).
      test_only (bool): If True it can only be used by test rules.
      requires (list): A list of arbitrary strings that define kinds of output that this rule might want.
                See 'provides' for more detail; it's mostly useful to match up rules with multiple
                kinds of output with ones that only need one of them, eg. a proto_library with
                a python_library that doesn't want the C++ or Java proto outputs.
                Entries in 'requires' are also implicitly labels on the rule.
      provides (dict): A map of arbitrary strings to dependencies of the rule that provide some specific
                type of thing. For example:
                  provides = {'py': ':python_rule', 'go': ':go_rule'},
                A Python rule would have requires = ['py'] and so if it depended on a rule like
                this it would pick up a dependency on :python_rule instead. See the proto rules
                for an example of where this is useful.
                Note that the keys of provides and entries in requires are arbitrary and
                have no effect until a matched pair meet one another.
      pre_build (function): A function to be executed immediately before the rule builds. It receives one
                 argument, the name of the building rule. This is mostly useful to interrogate
                 the metadata of dependent rules which isn't generally available at parse time;
                 see the get_labels function for a motivating example.
      post_build (function): A function to be executed immediately after the rule builds. It receives two
                  arguments, the rule name and its command line output.
                  This is significantly more useful than the pre_build function, it can be used
                  to dynamically create new rules based on the output of another.
      pass_env: List of environment variables to be passed from outside. Any changes to them will
                be recorded in this target's hash and will hence force it to rebuild.
      local: Forces the rule to be built locally; when remote execution is enabled it will not
             be sent remotely but executed on the local machine.
      output_dirs: Directories to add to the output of the rule. Files inside these directories will be added to
                   the root of the rule e.g. if you have an outdir foo, foo/bar.txt will be added as if bar.txt was in
                   the root of the build directory.
      exit_on_error: If true, the executed command will fail immediately on any error (i.e. it is
                     executed in a shell with -e).
      entry_points (dict): A subset of outputs of this rule that can be used as entry points by other rules.
                           Entry points can be referenced though the `//path/to:rule|entry-point` syntax.
      env (dict): Any additional environment variables to set for this build rule.
      optional_outs (list): Any additional outputs this rule might produce. These are are not made available to rules
                            that depend on this rule. They are only copied to plz-out. These can be useful for symbols,
                            source maps and other metadata like that.
    """
    if out and outs:
        fail('Can\'t specify both "out" and "outs".')
    return build_rule(
        name = name,
        srcs = srcs,
        outs = [out] if out else outs,
        cmd = ' && '.join(cmd) if isinstance(cmd, list) else cmd,
        deps = deps,
        exported_deps = exported_deps,
        data = data,
        tools = tools,
        secrets = secrets,
        labels = labels,
        visibility = visibility,
        output_is_complete = output_is_complete,
        building_description = building_description,
        hashes = hashes,
        pre_build = pre_build,
        post_build = post_build,
        binary = binary,
        sandbox = sandbox,
        build_timeout = timeout,
        needs_transitive_deps = needs_transitive_deps,
        requires = requires,
        provides = provides,
        test_only = test_only,
        pass_env = pass_env,
        local = local,
        output_dirs = output_dirs,
        exit_on_error = exit_on_error,
        entry_points = entry_points,
        env = env,
        optional_outs = optional_outs,
    )


def gentest(name:str, test_cmd:str|list|dict, labels:list&features&tags=None, cmd:str|list|dict=None, srcs:list|dict=None,
            outs:list=None, deps:list=None, exported_deps:list=None, tools:str|list|dict=None, test_tools:str|list|dict=None,
            data:list|dict=None, visibility:list=None, timeout:int=0, needs_transitive_deps:bool=False,
            flaky:bool|int=0, secrets:list|dict=None, no_test_output:bool=False, test_outputs:list=None,
            output_is_complete:bool=True, requires:list=None, sandbox:bool=None, size:str=None, local:bool=False,
            pass_env:list=None, exit_on_error:bool=CONFIG.EXIT_ON_ERROR):
    """A rule which creates a test with an arbitrary command.

    The command must return zero on success and nonzero on failure. Test results are written
    to test.results (or not if no_test_output is True).
    Most arguments are similar to genrule() so we cover them in less detail here.

    Args:
      name (str): Name of the rule
      test_cmd (str | dict): Command to run for the test. It works similarly to the cmd attribute;
                             see genrule for a more detailed discussion of its properties.
                             The command should exit with 0 when successful, and nonzero otherwise.
                             Normally this will correspond to the test results that are output,
                             unless no_test_output is True in which case this is the only thing
                             that determines success / failure.
      labels (list): Labels to apply to this test.
      cmd (str | dict): Command to run to build the test.
      srcs (list | dict): Source files for this rule.
      outs (list): Output files of this rule.
      deps (list): Dependencies of this rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      tools (str | list | dict): Tools used to build this rule; similar to srcs but are not copied to the temporary
                    build directory.
      test_tools (str | list | dict): Like tools but available to test_cmd instead.
      secrets (list | dict): Secrets available to this rule while building.
      data (list | dict): Runtime data files for the test.
      visibility (list): Visibility declaration of this rule.
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      needs_transitive_deps (bool): True if building the rule requires all transitive dependencies to
                             be made available.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      no_test_output (bool): If true the test is not expected to write any output results, it will
                             pass if the command exits with 0 and fail otherwise.
      test_outputs (list): List of optional additional test outputs.
      output_is_complete (bool): If this is true then the rule blocks downwards searches of transitive
                          dependencies by other rules.
      requires (list): Kinds of output from other rules that this one requires.
      sandbox (bool): If True, the test is run within a sandbox that restricts some cgroups
                      including networking, process, IPC, etc. Only has an effect on Linux.
                      If this is on by default then tests can opt out by setting this to False.
      size (str): Test size (enormous, large, medium or small).
      local: Forces the rule to be built locally; when remote execution is enabled it will not
             be sent remotely but executed on the local machine.
      pass_env: List of environment variables to be passed from outside. Any changes to them will
                be recorded in this target's hash and will hence force it to rebuild.
      exit_on_error: If true, the executed command will fail immediately on any error (i.e. it is
                     executed in a shell with -e).
    """
    return build_rule(
        name = name,
        srcs = srcs,
        outs = outs,
        deps = deps,
        exported_deps = exported_deps,
        data = data,
        tools = tools,
        test_tools = test_tools,
        secrets = secrets,
        test_cmd  =  ' && '.join(test_cmd) if isinstance(test_cmd, list) else test_cmd,
        cmd = ' && '.join(cmd) if isinstance(cmd, list) else cmd,
        visibility = visibility,
        output_is_complete = output_is_complete,
        labels = labels,
        binary = True,
        test = True,
        test_timeout = timeout,
        size = size,
        needs_transitive_deps = needs_transitive_deps,
        requires = requires,
        test_sandbox = sandbox,
        no_test_output = no_test_output,
        test_outputs = test_outputs,
        flaky = flaky,
        local = local,
        pass_env = pass_env,
        exit_on_error = exit_on_error,
    )


def export_file(name:str, src:str, visibility:list=None, binary:bool=False, test_only:bool&testonly=False):
    """Essentially a single-file alias for filegroup.

    Args:
      name (str): Name of the rule
      src (str): Source file for the rule
      visibility (list): Visibility declaration
      binary (bool): True to mark the rule outputs as binary
      test_only (bool): If true the exported file can only be used by test targets.
    """
    return filegroup(
        name = name,
        srcs = [src],
        visibility = visibility,
        binary = binary,
        test_only = test_only,
    )


def filegroup(name:str, tag:str='', srcs:list=None, deps:list=None, exported_deps:list=None,
              visibility:list=None, labels:list&features&tags=None, binary:bool=False, output_is_complete:bool=True,
              requires:list=None, provides:dict=None, hashes:list=None, test_only:bool&testonly=False):
    """Defines a collection of files which other rules can depend on.

    Sources can be omitted entirely in which case it acts simply as a rule to collect other rules,
    which is often more handy than you might think.

    Args:
      name (str): Name of the rule
      tag (str): Tag applied to name; generates a private rule, for example name='a',tag='b' gives
                 _a#b. Typically used for "private" rules.
      srcs (list): Source files for the rule.
      deps (list): Dependencies of the rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      visibility (list): Visibility declaration
      labels (list): Labels to apply to this rule
      binary (bool): True to mark the rule outputs as binary
      output_is_complete (bool): If this is true then the rule blocks downwards searches of transitive
                                 dependencies by other rules.
      requires (list): Kinds of output from other rules that this one requires.
      provides (dict): Kinds of output that this provides for other rules (see genrule() for a more
                       in-depth discussion of this).
      hashes (list): List of acceptable output hashes for this rule.
      test_only (bool): If true the exported file can only be used by test targets.
    """
    return build_rule(
        name=name,
        tag=tag,
        cmd='',
        srcs=srcs,
        deps=deps,
        exported_deps=exported_deps,
        visibility=visibility,
        building_description='Copying...',
        output_is_complete=output_is_complete,
        requires=requires,
        provides=provides,
        test_only=test_only,
        labels=labels,
        binary=binary,
        hashes=hashes,
        _filegroup=True,
    )


def hash_filegroup(name:str, srcs:list=None, deps:list=None, exported_deps:list=None, visibility:list=None,
                   labels:list&features&tags=None, test_only:bool&testonly=False, requires:list=None):
    """Copies a set of files to output names which are uniquely hashed based on their contents.

    For example, srcs = ["test.txt"] might output "test-b250cnf30f3h.txt".

    Args:
      name (str): Name of the rule.
      srcs (list): Source files for the rule.
      deps (list): Dependencies of the rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      visibility (list): Visibility declaration
      labels (list): Labels to apply to this rule
      test_only (bool): If true the exported file can only be used by test targets.
      requires (list): Kinds of output from other rules that this one requires.
    """
    cmd = 'mkdir _out && '
    cmd += 'SHA256CMD="$(which sha256sum || echo shasum)" && '
    cmd += 'SHA256ARGS="$(which sha256sum >/dev/null || echo \'-a 256\')" && '
    cmd += 'for S in $SRCS; do '
    cmd += '    B="$(basename $S)" && '
    cmd += '    HASH="$(${SHA256CMD} ${SHA256ARGS} $S | cut -d " " -f 1)" && '
    cmd += '    mv "$S" "_out/${B%.*}-${HASH}.${B##*.}"; '
    cmd += 'done'
    return build_rule(
        name=name,
        srcs=srcs,
        output_dirs = ['_out'],
        cmd = cmd,
        deps=deps,
        exported_deps=exported_deps,
        visibility=visibility,
        building_description='Hashing...',
        output_is_complete=True,
        test_only=test_only,
        labels=labels,
        requires=requires,
    )


def system_library(name:str, srcs:list, deps:list=None, hashes:list=None,
                   visibility:list=None, test_only:bool&testonly=False):
    """Defines a rule to collect some dependencies from outside the build tree.

    This is essentially the same as a filegroup; it will simply copy files from the system
    into the build tree, you must add additional rules if compilation is necessary.

    Args:
      name (str): Name of the rule.
      srcs (list): System-level sources. Should all be absolute paths.
      deps (list): Dependencies of the rule.
      hashes (list): List of hashes; the output must match at least one of these. This is not required
                     but could be used to assert that the system lib is of some known version.
      visibility (list): Visibility declaration of the rule.
      test_only (bool): If true the rule is only visible to test targets.
    """
    return build_rule(
        name = name,
        system_srcs = srcs,
        outs = [basename(src) for src in srcs],
        deps = deps,
        cmd = 'cp "$SRCS" .',
        hashes = hashes,
        visibility = visibility,
        test_only = test_only,
        sandbox = False,
    )


def remote_file(name:str, url:str|list, hashes:list=None, out:str=None, binary:bool=False,
                visibility:list=None, licences:list=None, test_only:bool&testonly=False,
                labels:list=[], deps:list=None, exported_deps:list=None,
                extract:bool=False, strip_prefix:str='', _tag:str='',exported_files=[],
                entry_points:dict={}):
    """Defines a rule to fetch a file over HTTP(S).

    Args:
      name (str): Name of the rule
      url (str | list): URL or URLs to fetch. If multiple are passed then they will be tried
                        in sequence until one succeeds.
      hashes (list): List of hashes; the output must match at least one of these.
      out (str): Output name of the file. Chosen automatically if not given.
      binary (bool): True to mark the output as binary and runnable.
      visibility (list): Visibility declaration of the rule.
      licences (list): List of licences that apply to this rule.
      test_only (bool): If true the rule is only visible to test targets.
      labels (list): Labels to apply to this rule.
      deps (list): List of extra dependencies for this rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
      extract (bool): Extracts the contents of the downloaded file. It must be either zip or
                      tar format.
      strip_prefix (str): When extracting, strip this prefix from the extracted files.
      exported_files (list): A list of files to export from the archive when extracting.
    """
    if extract:
        if out:
            outs = [out]
            output_dirs = []
            extract_location = "_extract_dir" if exported_files else f"{out}"
            mv_cmds = ' && '.join([f'mv _extract_dir/{file} {out}' for file in exported_files])
        else:
            outs = []
            output_dirs = ["_out_dir"]
            extract_location = "_extract_dir" if exported_files else "_out_dir"
            mv_cmds = ' && '.join([f'mv _extract_dir/{file} _out_dir' for file in exported_files])

        remote_rule = remote_file(
            name = name,
            out = f"{name}_download",
            _tag = _tag + 'download',
            url = url,
            hashes = hashes,
            licences = licences,
            test_only = test_only,
            labels = labels,
        )

        if out:
            cmd = 'mkdir $OUT'
        else:
            cmd = 'mkdir _out_dir'

        cmd = f'{cmd} && "$TOOL" x $SRCS -o "{extract_location}"'
        if strip_prefix:
            cmd = f'{cmd} -s "{strip_prefix}"'

        if mv_cmds:
            cmd = f'{cmd} && {mv_cmds}'

        return build_rule(
            name = name,
            srcs = [remote_rule],
            outs = outs,
            output_dirs = output_dirs,
            tools = [CONFIG.JARCAT_TOOL],
            cmd = cmd,
            binary = binary,
            test_only = test_only,
            labels = labels,
            visibility = visibility,
            building_description = 'Extracting...',
            deps = deps,
            exported_deps = exported_deps,
            entry_points = entry_points,
        )

    urls = [url] if isinstance(url, str) else url
    url = urls[0]
    return build_rule(
        name = name,
        tag = _tag,
        cmd = '',
        _urls = urls,
        outs = [out or url[url.rfind('/') + 1:]],
        binary = binary,
        visibility = visibility,
        hashes = hashes,
        licences = licences,
        building_description = 'Fetching...',
        deps = deps,
        exported_deps = exported_deps,
        test_only = test_only,
        labels = labels,
        sandbox = False,
        entry_points = entry_points,
    )

def text_file(name:str, content:str, hashes:list=None, data:list|dict=[], out:str=None,
              binary:bool=False, visibility:list=None, licences:list=None, test_only:bool&testonly=False,
              labels:list=[], deps:list|dict=None, exported_deps:list=None, _tag:str='', entry_points:dict={}):
    """Defines a rule to convert a string in the build language into a text file.

    Args:
      name (str): Name of the rule
      content (str): The text content of the file.
      hashes (list): List of hashes; the output must match at least one of these.
      out (str): Output name of the file. Chosen automatically if not given.
      binary (bool): True to mark the output as binary and runnable.
      visibility (list): Visibility declaration of the rule.
      licences (list): List of licences that apply to this rule.
      test_only (bool): If true the rule is only visible to test targets.
      labels (list): Labels to apply to this rule.
      deps (list): List of dependencies for this rule.
      data (list): List of runtime data for this rule.
      exported_deps (list): Dependencies that will become visible to any rules that depend on this rule.
    """

    return build_rule(
        name = name,
        tag = _tag,
        cmd = '',
        _file_content = content,
        outs = [out or name],
        binary = binary,
        visibility = visibility,
        hashes = hashes,
        licences = licences,
        deps = deps,
        data = data,
        exported_deps = exported_deps,
        test_only = test_only,
        labels = labels,
        sandbox = False,
        entry_points = entry_points,
    )

def tarball(name:str, srcs:list, out:str=None, deps:list=None, subdir:str=None, gzip:bool=True,
            xzip:bool=False, flatten:bool=True, strip_prefix:str='',
            test_only:bool=False, visibility:list=None, labels:list&features&tags=[]):
    """Defines a rule to create a tarball containing outputs of other rules.

    File mode and ownership are preserved. However, the atime and mtime of all
    files will be set to 1 Jan 2000 00:00:00.

    Args:
      name (str): Rule name
      srcs (list): Source files to include in the tarball
      out (str): Name of output tarball (defaults to `name`.tar.gz, but see below re compression)
      subdir (str): Subdirectory to create in.
      gzip (bool): If True, the output will be gzipped. If False, it will just be a tarball.
      xzip (bool): If True, the output will be xzipped. Overrides gzip if passed.
      flatten (bool): If True, the output will be flattened into the subdirectory.
      strip_prefix (str): If flatten is False, strips this prefix from internal directory structure.
      deps (list): Dependencies
      visibility (list): Visibility specification.
      labels (list): Labels associated with this rule.
    """
    tar_out = out or (name + ('.tar.gz' if gzip else '.tar'))
    cmd = '$TOOL tar '
    tar_name = name
    if xzip:
        tar_out = name + '.tar'
        tar_name = f'_{name}#tar'
    elif gzip:
        cmd += ' -z'
    if subdir:
        cmd += ' --prefix ' + subdir
    if flatten:
        cmd += ' --flatten'
    elif strip_prefix:
        cmd += ' --strip-prefix ' + strip_prefix

    tar_rule = build_rule(
        name = tar_name,
        cmd = cmd,
        srcs = srcs,
        tools = [CONFIG.JARCAT_TOOL],
        outs = [tar_out],
        deps = deps,
        visibility = visibility,
        labels = labels + ['tar'],
        output_is_complete = True,
        test_only = test_only,
    )
    if not xzip:
        return tar_rule
    # The golang xzip package produces significantly (20%) larger output than filtering
    # through xz. At some point we will ditch that when they become closer, but for now
    # that's a bit hard to swallow so we'll use the command-line version.
    return build_rule(
        name = name,
        srcs = [tar_rule],
        outs = [out or (name + '.tar.xz')],
        cmd = 'xz -zc -T 0 $SRCS > "$OUT"',
        visibility = visibility,
        labels = labels + ['tar'],
        output_is_complete = True,
        test_only = test_only,
    )


def decompose(label:str):
    """Decomposes a build label into the package and name parts.

    Consider carefully when you should use this - command replacements may be more appropriate.
    Most rules should be able to accept labels without having to know anything about their structure.

    Args:
      label (str): A build label in either relative or absolute form.
    Raises:
      ValueError: if the given label is not a correctly formatted build label.
    """
    if label.startswith(':'):
        return get_base_path(), label.lstrip(':')
    elif label.startswith('//'):
        package, _, name = label.partition(':')
        return package.lstrip('/'), name
    else:
        fail(f"{label} doesn't look like a build label")


def check_config(key:str, section:str='buildconfig', rule:str='', example:str='...'):
    """Checks the configuration for the given item and dies if it's not set.

    Args:
      key (str): Config key that must be set, e.g. ANDROID_HOME
      section (str): Section of the configuration that it must be set in.
                     Defaults to buildconfig since most external rules will have to use that.
      rule (str): Kind of rule that will be using this, e.g. "Android". Affects the output message.
      example (str): Example that they might consider setting.
    """
    val = CONFIG.get(key)
    if not val:
        key = key.lower().replace('_', '-')
        rule_msg = f' to use {rule} rules' if rule else ''
        msg = f'You must set {section}.{key} in your .plzconfig{rule_msg}'
        msg = f'{msg}, e.g.\n[{section}]\n{key} = {example}\n'
        fail(msg)
    return val


def exports_files(srcs, name='exported_files', visibility=['PUBLIC'], licenses=None):
    """Makes a bunch of files available as a filegroup.

    Note that the semantics are not the same as Bazel; it lifts the restrictions on those
    files being available to other packages, whereas we're just creating a rule. It's not
    impossible to extend Please to support that but right now we're not bothering.
    """
    assert CONFIG.BAZEL_COMPATIBILITY, "exports_files is only available in Bazel compat mode"
    return filegroup(
        name = name,
        srcs = srcs,
        visibility = visibility,
    )


def is_platform(os:str|list=CONFIG.OS, arch:str|list=CONFIG.ARCH, host_os:str|list=CONFIG.HOSTOS,
                host_arch:str|list=CONFIG.HOSTARCH) -> bool:
    """
    Checks to see if the current platform that is configured matches the conditions provided. These follow the golang
    naming convention e.g. linux and amd64.

    https://github.com/golang/go/blob/master/src/go/build/syslist.go

    Args:
        os (str): The target operating system we are compiling for.
        arch (str): The target CPU architecture we are compiling for.
        host_os (str): The host operating system we are running on.
        host_arch (str): The host cpu architecture we are running on.
    """
    def as_list(i):
        if isinstance(i, list):
            return i
        return [i]

    os = as_list(os)
    arch = as_list(arch)
    host_os = as_list(host_os)
    host_arch = as_list(host_arch)

    return CONFIG.OS in os and CONFIG.ARCH in arch and CONFIG.HOSTOS in host_os and CONFIG.HOSTARCH in host_arch
