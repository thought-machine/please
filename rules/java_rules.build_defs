"""Built-in rules to compile Java code."""

def java_library(name:str, srcs:list=None, src_dir:str=None, resources:list=[], resources_root:str=None,
                 deps:list=[], modular:bool=False, exported_deps:list=None, visibility:list=None,
                 test_only:bool&testonly=False, javac_flags:list&javacopts=None, labels:list=[],
                 toolchain:str=CONFIG.JAVA_TOOLCHAIN):
    """Compiles Java source to a .jar which can be collected by other rules.

    Args:
      name (str): Name of the rule
      srcs (list): Java source files to compile for this library
      src_dir (str): Directory containing Java source files to compile.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      deps (list): Dependencies of this rule.
      modular (bool): Whether the produced file should be modular. Only supported with java 9+.
      exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                            rule will also receive when they're compiling. This is quite important for
                            Java; any dependency that forms part of the public API for your classes
                            should be an exported dependency.
      visibility (list): Visibility declaration of this rule.
      test_only (bool): If True, this rule can only be depended on by tests.
      javac_flags (list): List of flags passed to javac.
      labels (list): Additional labels to apply to this rule.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this java library.
    """
    resources_cmd = 'true'
    if resources:
        # TODO(jpoole): Check this actually matches the documented behaviour, as it's not clear it does
        if resources_root:
            resources_cmd = f'$(for SRC in $SRCS_RESOURCES; do DEST=${SRC#"{resources_root}"};mkdir -p $(dirname "_tmp/$DEST");cp "$SRC" "_tmp/$DEST"; done)'
        else:
            resources_cmd = '$(for SRC in $SRCS_RESOURCES; do mkdir -p $(dirname "_tmp/$SRC");cp "$SRC" "_tmp/$SRC"; done)'

    if srcs and src_dir:
        fail('You cannot pass both srcs and src_dir to java_library')
    if srcs or src_dir:
        if javac_flags:
            # See http://bazel.io/blog/2015/06/25/ErrorProne.html for more info about this flag;
            # it doesn't mean anything to us so we must filter it out.
            # TODO(peterebden): Push this nonsense down into the javac_worker binary so we don't have to know about it here.
            javac_flags = ' '.join([flag for flag in javac_flags if flag != '-extra_checks:off'])
        else:
            javac_flags = CONFIG.JAVAC_TEST_FLAGS if test_only else CONFIG.JAVAC_FLAGS

        javac_flags = '-g -encoding utf8 ' + javac_flags

        if CONFIG.JAVA_RELEASE_LEVEL:
            javac_flags = f'--release {CONFIG.JAVA_RELEASE_LEVEL} ' + javac_flags
        else:
            javac_flags = f'-source {CONFIG.JAVA_SOURCE_LEVEL} -target {CONFIG.JAVA_TARGET_LEVEL} ' + javac_flags

        javac = CONFIG.JAVAC_TOOL
        javac_worker = CONFIG.JAVAC_WORKER

        # Override old config if we have a toolchain configured
        if toolchain:
            javac = f'{toolchain}|javac'
            javac_worker = ''

        if not javac:
            javac = CONFIG.JAVAC_WORKER
            mflag = '--modular' if modular else ''
            srcflag = '--src_dir' if src_dir else ''
            javac_cmd = f'$(worker {javac_worker}) {javac_flags} {mflag} {srcflag}'
        else:
            find = f'find "$TMP_DIR" -name "*.jar"'
            if toolchain:
                find += f' -not -path "$TMP_DIR/$(location {toolchain})/*"'

            srcflag = '`find $SRCS_WORKER -name "*.java"`' if src_dir else '$SRCS_WORKER'
            javac_cmd = f'mkdir -p _tmp/META-INF && "$TOOLS_JAVAC" {javac_flags} -classpath .:`{find} | tr \\\\\\\\n :` -d _tmp {srcflag}'


        cmd = ' && '.join([
            javac_cmd,
            'find _tmp -name "*.class" | sed -e "s|_tmp/|${PKG} |g" -e "s/\\.class/.java/g" | sort > _tmp/META-INF/please_sourcemap',
            resources_cmd,
            'cd _tmp',
            '"$TOOLS_JARCAT" z -d -o "$OUT" -i .',
        ])

        src_dir_label = [] if srcs else ['src_dir:'+src_dir]

        return build_rule(
            name=name,
            srcs={
                # To ensure we don't pass the resources to the compiler,
                # this key has to match the magic constant in build_step.go
                'WORKER': srcs or [src_dir],
                'RESOURCES': resources,
            },
            deps=deps,
            exported_deps=exported_deps,
            outs=[name + '.jar'],
            visibility=visibility,
            cmd=cmd,
            building_description="Compiling...",
            requires=['java'],
            labels = labels + ['rule:java_test_library' if test_only else 'rule:java_library'] + src_dir_label,
            test_only=test_only,
            tools={
                'javac': [javac],
                'jarcat': [CONFIG.JARCAT_TOOL],
            },
        )
    elif resources:
        # Can't run javac since there are no java files.
        if resources_root:
            cmd = 'cd ${PKG_DIR}/%s && $TOOL z -d -o ${OUT} -i .' % resources_root
        else:
            cmd = '$TOOL z -d -o ${OUTS} -i .'
        return build_rule(
            name=name,
            srcs=resources,
            deps=deps,
            exported_deps=exported_deps,
            outs=[name + '.jar'],
            visibility=visibility,
            cmd=cmd,
            building_description="Linking...",
            requires=['java'],
            labels = labels + ['rule:test_resources' if test_only else 'rule:resources'],
            test_only=test_only,
            tools=[CONFIG.JARCAT_TOOL],
        )
    else:
        # If input is only jar files (as maven_jar produces in some cases) we simply collect them
        # all up for other rules to use.
        return filegroup(
            name=name,
            deps=deps,
            exported_deps=exported_deps,
            visibility=visibility,
            output_is_complete=False,
            requires=['java'],
            labels = labels,
            test_only=test_only,
        )


def java_module(name:str, srcs:list=None, src_dir:str=None, resources:list=None, resources_root:str=None,
                deps:list=None, visibility:list=None, test_only:bool&testonly=False, javac_flags:list&javacopts=None,
                toolchain:str=CONFIG.JAVA_TOOLCHAIN):
    """Compiles Java source to a modular .jar which can be collected by other rules.

    Args:
      name (str): Name of the rule
      srcs (list): Java source files to compile for this library
      src_dir (str): Directory containing Java source files to compile.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      deps (list): Dependencies of this rule.
      exported_deps (list): Exported dependencies, ie. dependencies that other things depending on this
                            rule will also receive when they're compiling. This is quite important for
                            Java; any dependency that forms part of the public API for your classes
                            should be an exported dependency.
      visibility (list): Visibility declaration of this rule.
      test_only (bool): If True, this rule can only be depended on by tests.
      javac_flags (list): List of flags passed to javac.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this java module.
    """
    return java_library(
        name = name,
        srcs = srcs,
        src_dir = src_dir,
        resources = resources,
        resources_root = resources_root,
        deps = deps,
        visibility = visibility,
        test_only = test_only,
        javac_flags = javac_flags,
        modular = True,
        toolchain = toolchain,
    )


def java_runtime_image(name:str, main_module:str, main_class:str, modules:list, out:str=None,
                       deps:list=[], data:list=None, visibility:list=None,
                       jlink_args:str='--strip-debug --compress=2'):
    """Assembles a set of modules into an executable java runtime image.

    Args:
      name (str): Name of the rule.
      main_module (str): Main module to set in the manifest. Has to be included in 'modules'.
      main_class (str): Main class to set in the manifest. Has to belong to 'main_module'.
      modules (list): Modules to be included in the runtime image.
      out (str): Name of the folder that contains the runtime image and the binary contained by it. Defaults to 'name'.
      deps (list): Dependencies of this rule.
      data (list): Deprecated, has no effect.
      visibility (list): Visibility declaration of this rule.
      jlink_args (str): Arguments to pass to the JVM in the run script.
    """
    if not CONFIG.JAVA_HOME:
        fail('Java home needs to be set to link java runtime images against jmods.')
    if not CONFIG.JLINK_TOOL:
        fail('A jlink tool is required to build java runtime images.')
    if not modules:
        fail('You cannot assemble a java runtime image without specifying any modules.')
    out = out or name
    depflags = r'`find "$TMP_DIR" -name "*.jar" | tr \\\\n :`'
    modules = ','.join(modules)
    cmd = f"$TOOL --module-path {depflags}:{CONFIG.JAVA_HOME}/jmods --add-modules {modules} --launcher {name}={main_module}/{main_class} --output {out} {jlink_args}"

    return build_rule(
        name=name,
        deps=deps,
        outs=[out],
        cmd=cmd,
        needs_transitive_deps=True,
        output_is_complete=True,
        binary=True,
        building_description="Creating runtime image...",
        requires=['java'],
        visibility=visibility,
        tools=[CONFIG.JLINK_TOOL],
    )

def java_binary(name:str, main_class:str=None, out:str=None, srcs:list=None, deps:list=[],
                data:list=None, visibility:list=None, jvm_args:str=None,
                self_executable:bool=CONFIG.FF_JAVA_SELF_EXEC, manifest:str=None, toolchain:str=CONFIG.JAVA_TOOLCHAIN):
    """Compiles a .jar from a set of Java libraries.

    Args:
      name (str): Name of the rule.
      main_class (str): Main class to set in the manifest.
      out (str): Name of output .jar file. Defaults to name + .jar.
      srcs (list): Source files to compile.
      deps (list): Dependencies of this rule.
      data (list): Runtime data for this rule.
      visibility (list): Visibility declaration of this rule.
      jvm_args (str): Arguments to pass to the JVM in the run script.
      self_executable (bool): True to make the jar self executable.
      manifest (str): Manifest file to put into the jar. Can't be passed at the same time as
                      main_class.
      toolchain (str): A label identifying a java_toolchain rule which will be used to build this java binary.
    """
    if main_class and manifest:
        fail("Can't pass both main_class and manifest to java_binary")
    if srcs:
        lib_rule = java_library(
            name = f'_{name}#lib',
            srcs = srcs,
            deps = deps,
            toolchain = toolchain,
        )
        deps += [lib_rule]
    # TODO(jpoole): Remove self exec flag and do this always once JavaBinaryExecutableByDefault has been merged
    if self_executable:
        preamble = '#!/bin/sh\nexec java %s -jar $0 ${@}' % (jvm_args or '')
        cmd, tools = _jarcat_cmd(main_class, preamble, manifest=manifest)
    else:
        # This is essentially a hack to get past some Java things (notably Jersey) failing
        # in subtle ways when the jar has a preamble (srsly...).
        cmd, tools = _jarcat_cmd(main_class, manifest=manifest)
    return build_rule(
        name=name,
        deps=deps,
        outs=[out or name + '.jar'],
        srcs=[manifest],
        data=data,
        cmd=cmd,
        needs_transitive_deps=True,
        output_is_complete=True,
        binary=True,
        building_description="Creating jar...",
        requires=['java'],
        visibility=visibility,
        tools=tools,
        labels=None if self_executable else ['java_non_exe'],
    )


def java_test(name:str, srcs:list, resources:list=None, resources_root:str=None,
              data:list|dict=[], deps:list=None, worker:str='',
              labels:list&features&tags=[], visibility:list=None, flags:str='',
              sandbox:bool=None, timeout:int=0, flaky:bool|int=0, test_outputs:list=None, size:str=None,
              test_package:str=CONFIG.DEFAULT_TEST_PACKAGE, jvm_args:str='', toolchain:str=CONFIG.JAVA_TOOLCHAIN):
    """Defines a Java test.

    Args:
      name (str): Name of the rule.
      srcs (list): Java files containing the tests.
      resources (list): Resources to include in the .jar file
      resources_root (str): Root directory to treat resources relative to; ie. if we are in
                            //project/main/resources and resources_root is project/main then
                            the resources in the .jar will be in the subdirectory 'resources'.
      data (list): Runtime data files for this rule.
      deps (list): Dependencies of this rule.
      worker (str): Reference to worker script, A persistent worker process that is used to set up the test.
      labels (list): Labels to attach to this test.
      visibility (list): Visibility declaration of this rule.
      flags (str): Flags to pass to the test invocation.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      timeout (int): Maximum length of time, in seconds, to allow this test to run for.
      flaky (int | bool): True to mark this as flaky and automatically rerun.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      test_package (str): Java package to scan for test classes to run.
      jvm_args (str): Arguments to pass to the JVM in the run script.
      toolchain (str): A label identifying a java_toolchain rule which will be used to run this java test.
    """
    lib_rule = java_library(
        name=f'_{name}#lib',
        srcs=srcs,
        resources=resources,
        resources_root=resources_root,
        deps=deps,
        test_only=True,
        labels=labels + ["rule:java_test"],
        toolchain = toolchain,
        # Deliberately not visible outside this package.
    )
    # As above, would be nicer if we could make the jars self-executing again.
    cmd, tools = _jarcat_cmd('build.please.main.TestMain')
    tools['junit'] = [CONFIG.JUNIT_RUNNER]

    if toolchain:
        java = f'{toolchain}|java'
    else:
        java = 'java'

    cmd = 'ln -s "$(if [ -f "$TOOLS_JUNIT" ]; then echo "$TOOLS_JUNIT"; else echo "$(which "$TOOLS_JUNIT")"; fi)" . && ' + cmd
    test_cmd = f'$TOOLS_JAVA -Dbuild.please.testpackage={test_package} {jvm_args} -jar $(location :{name}) {flags}'

    deps = [lib_rule]
    if worker:
        test_cmd = f'$(worker {worker}) && {test_cmd} '
        deps += [worker]

    return build_rule(
        name=name,
        cmd=cmd,
        test_cmd=test_cmd,
        test_tools= {"JAVA": [java]},
        data=data,
        outs=[name + '.jar'],
        deps=deps,
        visibility=visibility,
        test_sandbox=sandbox,
        labels=labels + ['test_results_dir'],
        test_timeout=timeout,
        size = size,
        flaky=flaky,
        test_outputs=test_outputs,
        requires=['java', 'test'],
        needs_transitive_deps=True,
        output_is_complete=True,
        test=True,
        binary=True,
        building_description="Creating jar...",
        tools=tools,
    )


def maven_jar(name:str, id:str, repository:str|list=None, hash:str=None, hashes:list=None, deps:list=None,
              visibility:list=None, filename:str=None, sources:bool=True, licences:list=None,
              native:bool=False, artifact_type:str=None, test_only:bool&testonly=False,
              binary:bool=False, classifier:str='', classifier_sources_override:str=''):
    """Fetches a single Java dependency from Maven.

    Args:
      name (str): Name of the output rule.
      id (str): Maven id of the artifact (eg. org.junit:junit:4.1.0)
      repository (str | list): Maven repositories to fetch deps from.
      hash (str): Hash for produced rule.
      hashes (list): List of hashes for produced rule.
      deps (list): Labels of dependencies, as usual.
      visibility (list): Visibility label.
      filename (str): Filename we attempt to download. Defaults to standard Maven name.
      sources (bool): True to download source jars as well.
      licences (list): Licences this package is subject to.
      native (bool): Attempt to download a native jar (i.e. add "-linux-x86_64" etc to the URL).
      artifact_type (str): Type of artifact to download (defaults to jar but could be e.g. aar).
      test_only (bool): If True, this target can only be used by tests or other test_only rules.
      binary (bool): If True, we attempt to fetch and download an executable binary. The output
                     is marked as such. Implies native=True and sources=False.
      classifier (str): Maven classifier, allows to distinguish artifacts that were built from
                     the same POM but differ in their content.
      classifier_sources_override (str): Allows to override the classifier used to fetch the
                     source artifact.
                     e.g. logback-core-1.1.3-tests.jar and logback-core-1.1.3-test-sources.jar
    """
    if hash and hashes:
        fail('You can pass only one of hash or hashes to maven_jar')

    hashes = hashes if hashes else [hash] if hash else None

    if not artifact_type:
        id, _, artifact_type = id.partition('@')
        artifact_type = artifact_type or 'jar'
    group, artifact, version, sources, licences = _parse_maven_artifact(id, sources, licences)
    artifact_type = '.' + artifact_type
    out_artifact_type = artifact_type
    repository = repository or CONFIG.DEFAULT_MAVEN_REPO
    repos = [repository] if isinstance(repository, str) else repository
    if classifier:
        classifier = '-' + classifier
    if binary:
        native = True
        sources = False
        artifact_type = '.exe'  # Maven always describes them this way, even for Linux :(
        out_artifact_type = ''  # But we're not peasants so we won't do the same.
    if native:
        filename = filename or f'{artifact}-{version}-{classifier}$XOS-$XARCH{artifact_type}'
    else:
        filename = filename or f'{artifact}-{version}{classifier}{artifact_type}'

    group = group.replace('.', '/')
    urls = ['/'.join([repo, group, artifact, version, filename]) for repo in repos]
    bin_rule  =  remote_file(
        name = name,
        _tag = 'bin',
        url = urls,
        out = name + out_artifact_type,
        labels = ['maven-classes'],
        licences = licences,
        exported_deps = deps,  # easiest to assume these are always exported.
        test_only = test_only,
        binary = binary,
    )
    provides = {'java': bin_rule}
    srcs = [bin_rule]

    if sources:
        if classifier_sources_override:
            classifier = '-' + classifier_sources_override
        filename = f'{artifact}-{version}{classifier}-sources.jar'
        urls = ['/'.join([repo, group, artifact, version, filename]) for repo in repos]
        src_rule = remote_file(
            name = name,
            _tag = 'src',
            url = urls,
            out = filename if  CONFIG.FF_MAVEN_JAR else  name + '_src' + artifact_type,
            labels = ['maven-sources'],
            hashes = hashes if CONFIG.FF_MAVEN_JAR else [],
            licences = licences,
            test_only = test_only,
        )
        srcs += [src_rule]

    # .aar's have an embedded classes.jar in them. Pull that out so other rules can use it.
    if artifact_type == '.aar':
        classes_rule = build_rule(
            name = name,
            tag = 'classes',
            srcs = [bin_rule],
            cmd = '$TOOL x $SRC classes.jar',
            outs = [name + '.jar'],
            visibility = visibility,
            licences = licences,
            requires = ['java'],
            exported_deps = deps,
            test_only=test_only,
            tools = [CONFIG.JARCAT_TOOL],
        )
        provides = {
            'java': classes_rule,
            'android': bin_rule,
        }
        local_deps = [classes_rule]
    else:
        local_deps = None

    return filegroup(
        name = name,
        srcs = srcs,
        provides = provides,
        exported_deps=deps,  # easiest to assume these are always exported.
        deps = local_deps,  # ensure the classes_rule gets built correctly if there is one.
        hashes = None if CONFIG.FF_MAVEN_JAR else hashes,
        labels = ['mvn:' + id, 'rule:maven_jar'],
        visibility = visibility,
        licences = licences,
        test_only=test_only,
        output_is_complete = False,
        binary = binary,
    )


def _parse_maven_artifact(id, sources=True, licences=None):
    """Parses a Maven artifact in group:artifact:version format, with possibly some extras."""
    parts = id.split(':')
    if len(parts) == 5:
        group, artifact, version = parts[:3]
        sources = parts[3] == 'src'
        licences = parts[4].split('|')
    elif len(parts) == 4:
        group, artifact, version = parts[:3]
        sources = parts[3] == 'src'
    elif len(parts) == 3:
        group, artifact, version = parts
    else:
        fail(f'Unknown artifact format: {id} (should be group:artifact:version)')
    return group, artifact, version, sources, licences


def _jarcat_cmd(main_class=None, preamble=None, manifest=None):
    """Returns the command we'd use to invoke jarcat, and the tool paths required."""
    cmd = '$TOOLS_JARCAT z -i . -o ${OUTS} -j'
    if main_class:
        cmd += f' -m "{main_class}"'
    if preamble:
        cmd += f" -p '{preamble}'"
    if manifest:
        cmd += ' --manifest "$SRCS"'
    return cmd, {'jarcat': [CONFIG.JARCAT_TOOL]}

# This function is exposed as java_toolchain unless Bazel compatibility is enabled in which case it is exposed as
# please_java_toolchain. This is to avoid namespace conflicts with Bazel's java_toolchain rule. 
def _java_toolchain(name : str, jdk_url : str|dict='', jdk:str='', visibility:list = ["PUBLIC"], hashes = []) -> str:
    """Downloads the JDK so language rules can use the toolchain"""
    if jdk_url and jdk:
        fail("Either jdk or jdk_url should be provided but not both")

    if not jdk:
        jdk_url = jdk_url if isinstance(jdk_url, str) else jdk_url.get(CONFIG.OS)

        if not jdk_url:
            fail(f"No jdk_url defined for platform {CONFIG.OS}")

        jdk = remote_file(
            name=f"_{name}#download",
            url = jdk_url,
            visibility = visibility,
            hashes = hashes,
        )

    return build_rule(
        name = name,
        srcs = [jdk],
        outs = [name],
        tools = [CONFIG.JARCAT_TOOL],
        cmd = " && ".join([
            '"$TOOL" x $SRCS -o extract_dir',
            f'mv $(dirname $(dirname $(find extract_dir/ -name javac))) {name}',
            f"chmod +x {name}/bin/*",
        ]),
        binary = True,
        building_description = 'Extracting...',
        entry_points = {
            "java": f"{name}/bin/java",
            "javac": f"{name}/bin/javac",
        },
        visibility = visibility,
    )

please_java_toolchain = _java_toolchain

def java_toolchain(name : str, jdk_url : str|dict='', jdk:str='', visibility:list = ["PUBLIC"], hashes : list = []):
    """This is an experimental feature and is subject to breaking changes in minor releases.

    Defines a toolchain that downloads a JDK that can be used with java languages rules. This can be configured in your
    .plzconfig via the config option java.toolchain.

    This rule is aliased please_java_toolchain as well. When Bazel compatibility is enabled, this alias must be used
    instead.

    Args:
      name (str): Name of the rule.
      jdk_url (str): A URL to an archive containing a JDK distribution. Either this or jdk should be provided.
      jdk (str): An archive of a jdk distribution or a label of a rule that produces one. Either this or jdk_url should
                 be provided.
      visibility (list[str]): Visibility of this rule. Defaults to PUBLIC.
      hashes (list[str]): A list of valid hashes for the produced rule.
    """
    return _java_toolchain(
        name = name,
        jdk_url = jdk_url,
        jdk = jdk,
        visibility = visibility,
        hashes = hashes,
    )

if CONFIG.BAZEL_COMPATIBILITY:
    def bazel_java_toolchain(javac=None, source_version=None, target_version=None):
        """Mimics some effort at Bazel compatibility.

        This doesn't really have the same semantics and ignores a bunch of arguments but it
        isn't easy for us to behave the same way that they do.
        """
        return package(
            javac_tool = javac,
            java_source_level = source_version,
            java_target_level = target_version,
        )

    java_toolchain = bazel_java_toolchain

    def java_import(name, jars, deps=None, exports=None, test_only=False, visibility=None):
        """Mimics java_import, as far as I can tell we don't need to do much here."""
        return filegroup(
            name = name,
            srcs = jars,
            deps = deps,
            exported_deps = exports,
            test_only = test_only,
            visibility = visibility,
        )

