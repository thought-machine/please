go_library(
    name = "langserver",
    srcs = glob(
        ["*.go"],
        exclude = ["*_test.go"],
    ),
    visibility = ["//tools/build_langserver/...", "//src/core"],
    deps = [
        "//src/core",
        "//src/fs",
        "//src/parse",
        "//src/parse/asp",
        "//src/parse/rules",
        "//third_party/go:jsonrpc2",
        "//third_party/go:logging",
        "//tools/build_langserver/lsp",
    ],
)

go_test(
    name = "langserver_test",
    srcs = ["handler_test.go",
            "analyzer_test.go",
            "hover_test.go",
    ],
    data = ["test_data"],
    deps = [
        ":langserver",
        "//src/parse/rules",
        "//third_party/go:testify",
    ],
)

go_test(
    name ="{time}-{message}".format(time='today', message='msg'),
    srcs = ["utils_test.go"],
    deps = [
        ":langserver",
        "//third_party/go:testify",
    ],
)

mystr = "{time}-{message}".format(time='today', message='msg')

replace_str = x.replace('-', '_')

unary = not len(replace_str)

call_assign = subinclude("//build_defs:fpm")

label_list_multi = [
     "//src/fs",
     "//src/core",
     "//src/parse",
     "//src/parse/asp",
     "//src/parse/rules",
     "//third_party/go:jsonrpc2",
     "//third_party/go:logging",
     "//tools/build_langserver/lsp",
 ]

label_list_single = ["//src/fs", "//src/core"]

if_assign = "hello" if len("") else subinclude("//build_defs:fpm")

python_library(name = "test", srcs = ["utils_test.go"])
