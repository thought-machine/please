
def please_repo_e2e_test(
        name: str,
        plz_command: str,
        repo: str,
        deps: list=[],
        expected_output: dict = {},
        labels: list = [],
        set_tool_config: bool = True,
):
    if set_tool_config:
        plz_command = plz_command.replace("plz ", "$TMP_DIR/$DATA_PLEASE -o java.jarcattool:$TMP_DIR/$DATA_JARCAT_TOOL -o go.testtool:$TMP_DIR/$DATA_TEST_TOOL -o go.installtool:$TMP_DIR/$DATA_INSTALL_TOOL -o go.filtertool:$TMP_DIR/$DATA_FILTER_TOOL ")
    else:
        plz_command = plz_command.replace("plz ", "$TMP_DIR/$DATA_PLEASE ")
    test_cmd = [
        "mv $DATA_FREE_BSD_CONFIG $DATA_REPO",
        "cd $DATA_REPO",
         plz_command,
    ]

    if expected_output:
       test_cmd += [f"$TMP_DIR/$DATA_CONTENT_CHECKER '{o}' '{c}'" for o, c in expected_output.items()]


    test_cmd = ' && '.join(test_cmd)

    data = {
        "TEST_TOOL": ["//tools/please_go_test"],
        "JARCAT_TOOL": ["//tools/jarcat"],
        "FILTER_TOOL": ["//tools/please_go_filter"],
        "INSTALL_TOOL": ["//tools/please_go_install"],
        "REPO": [repo],
        "PLEASE":  ["//src:please"],
        "CONTENT_CHECKER": ["//test/build_defs:content_checker"],
        "FREE_BSD_CONFIG": ["//test/build_defs:freebsd_config"]
    }

    return build_rule(
        name = name,
        test_cmd = test_cmd,
        deps = deps,
        data = data,
        test = True,
        no_test_output = True,
        labels = labels + ["plz_e2e_test", "e2e"],
    )