def codelab(name : str, codelab_md: str):
    return genrule(
        name = name,
        srcs = [codelab_md],
        deps = ["//docs/build_defs:codelab_template"],
        cmd = "$TOOLS export -f $(location //docs/build_defs:codelab_template) $SRC",
        outs = [f"{name}"],
        tools = ["//third_party/go:claat"],
        visibility = ["//docs/..."],
    )

def html_template(name : str, src : str, output : str = ''):
    cmd = '"$TOOL" --template "$SRCS_TEMPLATE" --in "$SRCS_IN"'
    if output:
        cmd = f'{cmd} -f {output}'
    return genrule(
        name = name,
        srcs = {
            "template": ["//docs:template_html"],
            "in": [src],
        },
        outs = [output if output else src],
        cmd = f'{cmd} > "$OUT"',
        tools = ["//docs/tools/templater"],
        visibility = ["//docs/..."],
    )

def plugin_rules(name : str, revision : str):
    remote = remote_file(
        name = f"{name}_remote",
        url = f"https://github.com/please-build/{name}-rules/archive/refs/tags/{revision}.tar.gz",
        extract = True,
    )

    extracted = build_rule(
            name = name,
            srcs = [remote],
            outs = [f"{name}_build_defs"],
            cmd = f"cp -r $SRCS/build_defs $OUT",
            tag = 'extract',
    )

    json = build_rule(
        name = name,
        srcs = [extracted],
        outs = [f"{name}_rules.json"],
        tag = 'json',
        cmd = "$TOOL init && $TOOL query rules $SRCS/* > $OUT",
        tools = ["//src:please"],
    )

    return export_file(
        name = f"{name}",
        src = json,
        )
