""" Rules to 'build' shell scripts.

Note that these do pretty much nothing beyond collecting the files. In future we might
implement something more advanced (ala .sar files or whatever).
"""

# Used by sh_binary to separate the compressed files from the actual script.
_TARBALL_BOUNDARY = '__TARFILE_FOLLOWS__'

# NB: This string is formatted strangely due to bash variable expansion being a massive pain.
_SH_BINARY_TMPL_PREFIX = """
SKIP=\\\$(awk '/^%(tarball_boundary)s/ { print NR + 1; exit 0; }' \\\$0)\n\
THIS=\\\$0\n\
tail -n +\\\$SKIP \\\$THIS | tar -xz -C \\\$(dirname \\\$0)
"""

_SH_BINARY_TMPL_SUFFIX = """
exit 0\n\
%(tarball_boundary)s"""


def sh_library(name, src, deps=None, visibility=None, link=True):
    """Generates a shell script binary, essentially just the given source.

    Note that these are individually executable so can only have one source file each.
    This is a bit tedious and would be nice to improve sometime.

    Args:
      name (str): Name of the rule
      src (str): Source file for the rule
      deps (list): Dependencies of this rule
      visibility (list): Visibility declaration of the rule.
      link (bool): Deprecated, has no effect.
    """
    filegroup(
        name=name,
        srcs=[src],
        deps=deps,
        visibility=visibility,
        binary=True,
    )


def sh_binary(name, main, deps=None, visibility=None):
    """Generates a shell script binary.

    The resulting script will contain three things:
    1) Code necessary to untar dependent files.
    2) The user defined shell script.
    3) The tar ball containing all dependent files.

    Args:
      name (str): Name of the rule
      main (str): The script to execute after all files have been uncompressed
      deps (list): Dependencies of this rule
      visibility (list): Visibility declaration of the rule.
    """
    tmpl_vars = {
        'tarball_boundary': _TARBALL_BOUNDARY,
    }

    # No need to go through tar/untar and injecting code if there are no dependencies
    if deps:
        cmds = ' && '.join([
            # Use the same shebang as the original script
            'head -1 $SRCS > $OUT',
            # Inject bash code to untar the compressed files.
            'echo "%s" >> $OUT' % (_SH_BINARY_TMPL_PREFIX % tmpl_vars),
            # Inject the user defined script.
            'cat $SRCS >> $OUT',
            # Inject the tar ball boundary.
            'echo "%s" >> $OUT' % (_SH_BINARY_TMPL_SUFFIX % tmpl_vars),
            # Compress the dependent files and dump out into the bash script.
            'find . -type f | grep -v $SRCS | grep -v $(echo $OUT | sed "s|$TMP_DIR||g") | sed "s/^\.\///g" | tar zc -f - --files-from - >> $OUT',
        ])
    else:
        cmds = 'cp $SRCS $OUT'

    build_rule(
        name = name,
        srcs = [main],
        outs = ['%s.sh' % name],
        cmd = cmds,
        deps = deps,
        binary = True,
        needs_transitive_deps = True
    )


def sh_test(name, src=None, args=None, labels=None, data=None, deps=None, size=None,
            visibility=None, flags='', flaky=0, test_outputs=None, timeout=0, container=False):
    """Generates a shell test. Note that these aren't packaged in a useful way.

    Args:
      name (str): Name of the rule
      src (str): Test script file.
      args (list): Arguments that will be passed to this test when run.
                   Deprecated, prefer `flags` instead.
      labels (list): Labels to apply to this test.
      data (list): Runtime data for the test.
      deps (list): Dependencies of this rule
      size (str): Test size (enormous, large, medium or small).
      visibility (list): Visibility declaration of the rule.
      flags (str): Flags to apply to the test invocation.
      timeout (int): Maximum length of time, in seconds, to allow this test to run for.
      flaky (int | bool): True to mark this as flaky and automatically rerun.
      test_outputs (list): Extra test output files to generate from this test.
      container (bool | dict): True to run this test within a container (eg. Docker).
    """
    if args and not flags:
        flags = ' '.join(args)
    timeout, labels = _test_size_and_timeout(size, timeout, labels)
    build_rule(
        name=name,
        srcs=[src or test],
        data=data,
        deps=deps,
        outs=[name + '.sh'],
        cmd='ln -s ${SRC} ${OUT}',
        test_cmd='$TEST %s' % flags,
        visibility=visibility,
        labels=labels,
        binary=True,
        test=True,
        no_test_output=True,
        flaky=flaky,
        test_outputs=test_outputs,
        test_timeout=timeout,
        container=container,
    )
