"""Rules to build C and C++ targets.

Note that the C / C++ build process is complex with many options; we attempt to keep things
as high-level as possible here but expose flags to tune things as needed.

As a general note, most of the rules work by attaching labels indicating various flags etc which
later rules need to know about. These get picked up by later rules to adjust commands; this way
you can write a cc_library rule specifying e.g. linker_flags = ['-lz'] and not have to re-specify
that on every single cc_binary / cc_test that transitively depends on that library.
"""

_COVERAGE_FLAGS = ' -ftest-coverage -fprofile-arcs -fprofile-dir=.'
# OSX's ld uses --all_load / --noall_load instead of --whole-archive.
_WHOLE_ARCHIVE = '-all_load' if CONFIG.OS == 'darwin' else '--whole-archive'
_NO_WHOLE_ARCHIVE = '-noall_load' if CONFIG.OS == 'darwin' else '--no-whole-archive'


def cc_library(name, srcs=None, hdrs=None, private_hdrs=None, deps=None, visibility=None, test_only=False,
               compiler_flags=None, linker_flags=None, pkg_config_libs=None, includes=None, defines=None,
               alwayslink=False, _c=False):
    """Generate a C or C++ library target.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker; these will not be used here but will be
                           picked up by a cc_binary or cc_test rule.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config. Again, the ldflags
                              will be picked up by cc_binary or cc_test rules.
      includes (list): List of include directories to be added to the compiler's path.
      defines (list | dict): List of tokens to define in the preprocessor.
                             Alternatively can be a dict of name -> value to define, in which case
                             values are surrounded by quotes.
      alwayslink (bool): If True, any binaries / tests using this library will link in all symbols,
                         even if they don't directly reference them. This is useful for e.g. having
                         static members that register themselves at construction time.
    """
    srcs = srcs or []
    hdrs = hdrs or []
    deps = deps or []
    compiler_flags = compiler_flags or []
    linker_flags = linker_flags or []
    pkg_config_libs = pkg_config_libs or []
    includes = includes or []
    defines = defines or []

    # Bazel suggests passing nonexported header files in 'srcs'. We however treat
    # srcs as things to actually compile and must mark a distinction.
    if CONFIG.BAZEL_COMPATIBILITY:
        src_hdrs = [src for src in srcs if src.endswith('.h')]
        private_hdrs = (private_hdrs or []) + src_hdrs
        srcs = [src for src in srcs if not src.endswith('.h')]
        # This is rather nasty; people seem to be relying on being able to reuse
        # headers that they've put in srcs. We hence need to re-export them here.
        hdrs += src_hdrs
        # Found this in a few cases... can't pass -pthread to the linker.
        linker_flags = ['-lpthread' if l == '-pthread' else l for l in linker_flags]

    # Handle defines being passed as a dict, as a nicety for the user.
    if isinstance(defines, dict):
        defines = [k if v is None else r'%s=\"%s\"' % (k, v) for k, v in sorted(defines.items())]

    labels = (['cc:ld:' + flag for flag in linker_flags] +
              ['cc:pc:' + lib for lib in pkg_config_libs] +
              ['cc:inc:%s/%s' % (get_base_path(), include) for include in includes] +
              ['cc:def:' + define for define in defines])


    if not srcs:
        # Header-only library, no compilation needed.
        return filegroup(
            name=name,
            srcs=hdrs,
            requires=['cc_hdrs'],
            exported_deps=deps,
            labels=labels,
            test_only=test_only,
            visibility=visibility,
            output_is_complete=False,
        )

    # Collect the headers for other rules
    hdrs_rule = filegroup(
        name = name,
        tag = 'hdrs',
        srcs=hdrs,
        requires=['cc_hdrs'],
        exported_deps=deps,
        test_only=test_only,
        labels=labels,
    )

    cmds, tools = _library_cmds(_c, compiler_flags, pkg_config_libs)
    if len(srcs) > 1:
        # Compile all the sources separately, this is much faster for large numbers of files
        # than giving them all to gcc in one invocation.
        a_rules = []
        for src in srcs:
            a_name = '_%s#%s' % (name, src.replace('/', '_').replace('.', '_').replace(':', '_'))
            build_rule(
                name=a_name,
                srcs={'srcs': [src], 'hdrs': hdrs, 'priv': private_hdrs},
                outs=[a_name + '.a'],
                optional_outs=['*.gcno'],  # For coverage
                deps=deps,
                cmd=cmds,
                building_description='Compiling...',
                requires=['cc_hdrs'],
                test_only=test_only,
                labels=labels,
                tools=tools,
                # TODO(pebers): handle includes and defines in _library_cmds as well.
                pre_build=_library_transitive_labels(_c, compiler_flags, pkg_config_libs) if (deps or includes or defines) else None,
            )
            a_rules.append(':' + a_name)

        # Combine the archives into one.
        ar_tool, tools = _tool_path(CONFIG.AR_TOOL)
        a_rule = build_rule(
            name = name,
            tag = 'a',
            srcs = a_rules,
            outs = [name + '.a'],
            cmd = 'echo $SRCS | xargs -n 1 %s xo && %s rcs $OUT *.o' % (ar_tool, ar_tool),
            building_description = 'Archiving...',
            test_only = test_only,
            labels = labels,
            output_is_complete = True,
            deps = (deps or []) + [hdrs_rule],  # This is a little suboptimal but makes sure they get built when needed.
            tools = tools,
        )
        if alwayslink:
            labels.append('cc:al:%s/%s.a' % (get_base_path(), name))

        # Filegroup to pick that up with extra deps. This is a little annoying but means that
        # things depending on this get the combined rule and not the individual ones, but do get
        # all the other dependencies which are probably important.
        lib_rule = filegroup(
            name = name,
            tag = 'lib',
            srcs = [a_rule],
            deps = deps,
            test_only = test_only,
            labels = labels,
            output_is_complete=False,
        )

    else:
        # Single source file, optimise slightly by not extracting & remerging the archive.
        cc_rule = build_rule(
            name=name,
            tag='cc',
            srcs={'srcs': srcs, 'hdrs': hdrs, 'priv': private_hdrs},
            outs=[name + '.a'],
            optional_outs=['*.gcno'],  # For coverage
            deps=deps,
            cmd=cmds,
            building_description='Compiling...',
            requires=['cc_hdrs'],
            test_only=test_only,
            labels=labels,
            tools=tools,
            pre_build=_library_transitive_labels(_c, compiler_flags, pkg_config_libs) if deps else None,
        )
        if alwayslink:
            labels.append('cc:al:%s/%s.a' % (get_base_path(), name))
        # Need another rule to cover require / provide stuff. This is getting a bit complicated...
        lib_rule = filegroup(
            name = name,
            tag = 'lib',
            srcs = [cc_rule],
            deps = deps,
            test_only = test_only,
            labels = labels,
            output_is_complete=False,
        )

    return filegroup(
        name=name,
        srcs=[lib_rule],
        deps=[hdrs_rule],
        provides={
            'cc_hdrs': hdrs_rule,
            'cc': lib_rule,
        },
        test_only=test_only,
        visibility=visibility,
        output_is_complete=False,
    )


def cc_static_library(name, srcs=None, hdrs=None, compiler_flags=None, linker_flags=None,
                      deps=None, visibility=None, test_only=False, pkg_config_libs=None, _c=False):
    """Generates a C++ static library (.a).

    This is essentially just a collection of other cc_library rules into a single archive.
    Optionally this rule can have sources of its own, but it's quite reasonable just to use
    it as a collection of other rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
    """
    deps = deps or []
    provides = None
    if srcs:
        cc_library(
            name = '_%s#lib' % name,
            srcs = srcs,
            hdrs = hdrs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            _c=_c,
        )
        deps.append(':_%s#lib' % name)
        deps.append(':_%s#lib_hdrs' % name)
        provides = {
            'cc_hdrs': ':_%s#lib_hdrs' % name,
            'cc': ':' + name,
        }
    ar_tool, tools = _tool_path(CONFIG.AR_TOOL)
    build_rule(
        name = name,
        deps = deps,
        outs = ['lib%s.a' % name],
        cmd = (
            'for a in `find . -name "*.a"`; do (cd $(dirname $a) && %s x $(basename $a)); done;'
            '%s rcs $OUT `find . -name "*.o" | sort`' % (ar_tool, ar_tool)
        ),
        needs_transitive_deps = True,
        output_is_complete = True,
        visibility = visibility,
        test_only = test_only,
        building_description = 'Archiving...',
        provides = provides,
        tools = tools,
    )


def cc_shared_object(name, srcs=None, hdrs=None, out='', compiler_flags=None, linker_flags=None,
                     deps=None, visibility=None, test_only=False, pkg_config_libs=None,
                     includes=None, _c=False):
    """Generates a C++ shared object with its dependencies linked in.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files. These will be made available to dependent rules, so the distinction
                   between srcs and hdrs is important.
      out (str): Name of the output .so. Defaults to name + .so.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      test_only (bool): If True, is only available to other test rules.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      includes (list): Include directories to be added to the compiler's lookup path.
    """
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    deps = deps or []
    provides = None
    if srcs:
        cc_library(
            name = '_%s#lib' % name,
            srcs = srcs,
            hdrs = hdrs,
            compiler_flags = compiler_flags,
            linker_flags = linker_flags,
            deps = deps,
            test_only = test_only,
            pkg_config_libs = pkg_config_libs,
            includes = includes,
            _c=_c,
        )
        deps.append(':_%s#lib' % name)
        deps.append(':_%s#lib_hdrs' % name)
        provides = {
            'cc_hdrs': ':_%s#lib_hdrs' % name,
            'cc': ':' + name,
        }
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs, shared=True)
    build_rule(
        name=name,
        srcs={'srcs': srcs, 'hdrs': hdrs},
        outs=[out or name + '.so'],
        deps=deps,
        visibility=visibility,
        cmd=cmds,
        building_description='Linking...',
        binary=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        provides=provides,
        tools=tools,
        test_only=test_only,
        requires=['cc', 'cc_hdrs'],
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs, shared=True) if deps else None,
    )


def cc_binary(name, srcs=None, hdrs=None, private_hdrs=None, compiler_flags=None, linker_flags=None,
              deps=None, visibility=None, pkg_config_libs=None, test_only=False, static=False, _c=False):
    """Builds a binary from a collection of C++ rules.

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      private_hdrs (list): Header files that are available only to this rule and not exported to
                           dependent rules.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      deps (list): Dependent rules.
      visibility (list): Visibility declaration for this rule.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      test_only (bool): If True, this rule can only be used by tests.
      static (bool): If True, the binary will be linked statically.
    """
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    if static:
        linker_flags.append('-static')
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs)
    if srcs:
        if static:
            compiler_flags = compiler_flags or []
            compiler_flags.append('-static -static-libgcc')
        cc_library(
            name='_%s#lib' % name,
            srcs=srcs,
            hdrs=hdrs,
            private_hdrs=private_hdrs,
            deps=deps,
            pkg_config_libs=pkg_config_libs,
            compiler_flags=compiler_flags,
            test_only=test_only,
            _c=_c,
        )
        deps = deps or []
        deps.append(':_%s#lib' % name)
    build_rule(
        name=name,
        outs=[name],
        deps=deps,
        visibility=visibility,
        cmd=cmds,
        building_description='Linking...',
        binary=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=['cc'],
        tools=tools,
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs),
        test_only=test_only,
    )


def cc_test(name, srcs=None, hdrs=None, compiler_flags=None, linker_flags=None, pkg_config_libs=None,
            deps=None, data=None, visibility=None, flags='', labels=None, flaky=0, test_outputs=None,
            size=None, timeout=0, container=False, write_main=not CONFIG.BAZEL_COMPATIBILITY, _c=False):
    """Defines a C++ test using UnitTest++.

    We template in a main file so you don't have to supply your own.
    (Later we might allow that to be configured to help support other unit test frameworks).

    Args:
      name (str): Name of the rule
      srcs (list): C or C++ source files to compile.
      hdrs (list): Header files.
      compiler_flags (list): Flags to pass to the compiler.
      linker_flags (list): Flags to pass to the linker.
      pkg_config_libs (list): Libraries to declare a dependency on using pkg-config.
      deps (list): Dependent rules.
      data (list): Runtime data files for this test.
      visibility (list): Visibility declaration for this rule.
      flags (str): Flags to apply to the test invocation.
      labels (list): Labels to attach to this test.
      flaky (bool | int): If true the test will be marked as flaky and automatically retried.
      test_outputs (list): Extra test output files to generate from this test.
      size (str): Test size (enormous, large, medium or small).
      timeout (int): Length of time in seconds to allow the test to run for before killing it.
      container (bool | dict): If true the test is run in a container (eg. Docker).
      write_main (bool): Whether or not to write a main() for these tests.
    """
    timeout, labels = _test_size_and_timeout(size, timeout, labels)
    srcs = srcs or []
    linker_flags = linker_flags or []
    if CONFIG.DEFAULT_LDFLAGS:
        linker_flags.append(CONFIG.DEFAULT_LDFLAGS)
    if write_main:
        linker_flags.append('-lunittest++')
        genrule(
            name='_%s#main' % name,
            outs=['_%s_main.cc' % name],
            cmd='echo \'%s\' > $OUT' % _CC_TEST_MAIN_CONTENTS,
            test_only=True,
        )
        srcs.append(':_%s#main' % name)
    cmds, tools = _binary_cmds(_c, linker_flags, pkg_config_libs)
    test_cmd = None if not CONFIG.CPP_COVERAGE else {
        'opt': '$TEST %s' % flags,
        'dbg': '$TEST %s' % flags,
        'cover': '$TEST %s; R=$?; cp $GCNO_DIR/*.gcno . && gcov *.gcda && cat *.gcov > test.coverage; exit $R' % flags,
    }
    if srcs:
        cc_library(
            name='_%s#lib' % name,
            srcs=srcs,
            hdrs=hdrs,
            deps=deps,
            pkg_config_libs=pkg_config_libs,
            compiler_flags=compiler_flags,
            test_only=True,
            alwayslink=True,
            _c=_c,
        )
        deps = deps or []
        deps.append(':_%s#lib' % name)
    build_rule(
        name=name,
        outs=[name],
        deps=deps,
        data=data,
        visibility=visibility,
        cmd=cmds,
        test_cmd=test_cmd,
        building_description='Linking...',
        binary=True,
        test=True,
        needs_transitive_deps=True,
        output_is_complete=True,
        requires=['cc', 'cc_hdrs'],
        labels=labels,
        tools=tools,
        pre_build=_binary_transitive_labels(_c, linker_flags, pkg_config_libs),
        flaky=flaky,
        test_outputs=test_outputs,
        test_timeout=timeout,
        container=container,
    )


def cc_embed_binary(name, src, deps=None, visibility=None, test_only=False, namespace=None):
    """Build rule to embed an arbitrary binary file into a C library.

    You can depend on the output of this as though it were a cc_library rule.
    There are five functions available to access the data once compiled, all of which are
    prefixed with the file's basename:
      filename_start(): returns a const char* pointing to the beginning of the data.
      filename_end(): returns a const char* pointing to the end of the data.
      filename_size(): returns the length of the data in bytes.
      filename_start_nc(): returns a char* pointing to the beginning of the data.
                           This is a convenience wrapper using const_cast, you should not
                           mutate the contents of the returned pointer.
      filename_end_nc(): returns a char* pointing to the end of the data.
                         Again, don't mutate the contents of the pointer.
    You don't own the contents of any of these pointers so don't try to delete them :)

    Args:
      name (str): Name of the rule.
      src (str): Source file to embed.
      deps (list): Dependencies.
      visibility (list): Rule visibility.
      test_only (bool): If True, is only available to test rules.
      namespace (str): Allows specifying the namespace the symbols will be available in.
    """
    if src.startswith(':') or src.startswith('/'):
        deps = (deps or []) + [src]
    namespace = namespace or CONFIG.DEFAULT_NAMESPACE
    if not namespace:
        raise ValueError('You must either pass namespace= to cc_library or set the default namespace in .plzconfig')
    darwin = CONFIG.OS == 'darwin'

    hdr_rule = build_rule(
        name=name,
        tag='hdr',
        outs=[name + '.h'],
        srcs=[src],
        deps=deps,
        cmd='; '.join([
            # This replacement roughly mimics what ld will do to munge it into a symbol name.
            'export ENCODED_FILENAME="${SRCS//[\/\.]/_}"',
            'export BINARY_NAME=' + name,
            'export NAMESPACE=' + namespace,
            'echo "%s" > $OUT' % _CC_HEADER_CONTENTS,
        ]),
        visibility=visibility,
        building_description='Writing header...',
        requires=['cc'],
        test_only=test_only,
    )

    ar_tool, tools = _tool_path(CONFIG.AR_TOOL)
    if darwin:
        # OSX's ld doesn't support '--format binary', and this is the least fiddly
        # alternative. Requiring an additional tool is a bit suboptimal but probably
        # in the end easier than the alternatives.
        cmd = ' && '.join([
            'export ENCODED_FILENAME=${SRCS//[\/\.]/_}',
            'echo "%s" > embedded.asm' % _CC_DARWIN_ASM_CONTENTS,
            '%s -fmacho64 embedded.asm -o ${OUTS/.a/.o}' % CONFIG.ASM_TOOL,
            '%s rcs $OUT ${OUTS/.a/.o}' % ar_tool,
        ])
    else:
        ld_tool, tools = _tool_path(CONFIG.LD_TOOL, tools)
        cmd = '%s -r --format binary -o ${OUTS/.a/.o} $SRC && %s rcs $OUT ${OUTS/.a/.o}' % (
            ld_tool, ar_tool)

    lib_rule = build_rule(
        name = name,
        tag = 'lib',
        srcs=[src],
        outs=['lib%s.a' % name],
        deps=deps,
        cmd=cmd,
        visibility=visibility,
        building_description='Embedding...',
        requires=['cc'],
        tools=tools,
        test_only=test_only,
    )
    filegroup(
        name=name,
        srcs=[lib_rule, hdr_rule],
        visibility=visibility,
        test_only=test_only,
        provides={
            'cc_hdrs': hdr_rule,
            'cc': lib_rule,
        },
    )


_CC_HEADER_CONTENTS = """\
#ifdef __cplusplus
namespace ${NAMESPACE} {
extern \\"C\\" {
#endif  // __cplusplus
extern const char _binary_${ENCODED_FILENAME}_start[];
extern const char _binary_${ENCODED_FILENAME}_end[];
#ifdef __cplusplus
}
#endif  // __cplusplus

// Nicer aliases.
inline const char* ${BINARY_NAME}_start() {
  return _binary_${ENCODED_FILENAME}_start;
}
inline const char* ${BINARY_NAME}_end() {
  return _binary_${ENCODED_FILENAME}_end;
}
inline unsigned long ${BINARY_NAME}_size() {
  return _binary_${ENCODED_FILENAME}_end - _binary_${ENCODED_FILENAME}_start;
}
inline char* ${BINARY_NAME}_start_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_start);
}
inline char* ${BINARY_NAME}_end_nc() {
  return (char*)(_binary_${ENCODED_FILENAME}_end);
}
#ifdef __cplusplus
}  // namespace ${NAMESPACE}
#endif  // __cplusplus
"""

# We duplicate the symbols with _ and __ preceding, the compiler fails if _ is not
# present and the linker fails if __ isn't.
_CC_DARWIN_ASM_CONTENTS = r"""
bits 64

section .rodata

global _binary_${ENCODED_FILENAME}_start
global __binary_${ENCODED_FILENAME}_start
global _binary_${ENCODED_FILENAME}_end
global __binary_${ENCODED_FILENAME}_end
global _binary_${ENCODED_FILENAME}_size
global __binary_${ENCODED_FILENAME}_size

_binary_${ENCODED_FILENAME}_start:    incbin \"${SRCS}\"
__binary_${ENCODED_FILENAME}_start:   incbin \"${SRCS}\"
_binary_${ENCODED_FILENAME}_end:
__binary_${ENCODED_FILENAME}_end:
_binary_${ENCODED_FILENAME}_size:     dd \\$-_binary_${ENCODED_FILENAME}_start
__binary_${ENCODED_FILENAME}_size:    dd \\$-_binary_${ENCODED_FILENAME}_start
"""


# This is a lightweight way of building the test main, but it's awkward not
# having command line output as well as XML output.
_CC_TEST_MAIN_CONTENTS = """
#include <algorithm>
#include <fstream>
#include <stdlib.h>
#include <string.h>
#include "unittest++/UnitTest++.h"
#include "unittest++/XmlTestReporter.h"
int main(int argc, char const *argv[]) {
    auto run_named = [argc, argv](UnitTest::Test* test) {
        return argc <= 1 || std::any_of(argv + 1, argv + argc, [test](const char* name) {
            return strcmp(test->m_details.testName, name) == 0;
        });
    };

    std::ofstream f("test.results");
    if (!f.good()) {
      fprintf(stderr, "Failed to open results file\\n");
      return -1;
    }
    if (getenv("COVERAGE")) {
      std::ofstream c("test.coverage");
      c << "gcov";
    }
    UnitTest::XmlTestReporter reporter(f);
    UnitTest::TestRunner runner(reporter);
    return runner.RunTestsIf(UnitTest::Test::GetTestList(),
                             NULL,
                             run_named,
                             0);
}
"""


def _build_flags(compiler_flags, pkg_config_libs, defines=None, c=False, dbg=False):
    """Builds flags that we'll pass to the compiler invocation."""
    compiler_flags = compiler_flags or []
    if c:
        compiler_flags = [CONFIG.DEFAULT_DBG_CFLAGS if dbg else CONFIG.DEFAULT_OPT_CFLAGS] + compiler_flags
    else:
        compiler_flags = [CONFIG.DEFAULT_DBG_CPPFLAGS if dbg else CONFIG.DEFAULT_OPT_CPPFLAGS] + compiler_flags
    compiler_flags.append('-fPIC')
    if defines:
        compiler_flags.extend('-D' + define for define in defines)
    pkg_config_cmd = ' '.join('`pkg-config --cflags %s`' % x for x in pkg_config_libs or [])
    return ' '.join(compiler_flags) + ' ' + pkg_config_cmd


def _binary_build_flags(linker_flags, pkg_config_libs, shared=False, alwayslink=''):
    """Builds flags that we'll pass to the linker invocation."""
    pkg_config_cmd = ' '.join('`pkg-config --libs %s`' % x for x in pkg_config_libs or [])
    objs = '`find . -name "*.o" -or -name "*.a" | sort`'
    linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
    if not shared and alwayslink:
        objs = '%s%s %s %s%s %s' % (linker_prefix, _WHOLE_ARCHIVE, alwayslink, linker_prefix, _NO_WHOLE_ARCHIVE, objs)
    build_id_flag = ''
    if CONFIG.OS != 'darwin':
        # We don't order libraries in a way that is especially useful for the linker, which is
        # nicely solved by --start-group / --end-group. Unfortunately the OSX linker doesn't
        # support those flags; in many cases it will work without, so try that.
        # Ordering them would be ideal but we lack a convenient way of working that out from here.
        objs = '%s--start-group %s %s--end-group' % (linker_prefix, objs, linker_prefix)
        # OSX's ld doesn't have --build-id
        # TODO(pebers): Not sure about other OS's / linkers? This might be GNU specific?
        build_id_flag = linker_prefix + '--build-id=none'
    if shared:
        objs = '-shared %s%s %s %s%s' % (linker_prefix, _WHOLE_ARCHIVE, objs, linker_prefix, _NO_WHOLE_ARCHIVE)
    linker_flags = ' '.join(linker_prefix + f for f in (linker_flags or []))
    return ' '.join([objs, build_id_flag, linker_flags, pkg_config_cmd])


def _library_cmds(c, compiler_flags, pkg_config_libs, extra_flags=''):
    """Returns the commands needed for a cc_library rule."""
    dbg_flags = _build_flags(compiler_flags, pkg_config_libs, c=c, dbg=True)
    opt_flags = _build_flags(compiler_flags, pkg_config_libs, c=c)
    cc_tool, tools = _tool_path(CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL)
    ar_tool, tools = _tool_path(CONFIG.AR_TOOL, tools)
    cmd_template = '%s -c -I . ${SRCS_SRCS} %s %s && %s rcs $OUT *.o'
    cmds = {
        'dbg': cmd_template % (cc_tool, dbg_flags, extra_flags, ar_tool),
        'opt': cmd_template % (cc_tool, opt_flags, extra_flags, ar_tool),
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = cmd_template % (cc_tool, dbg_flags + _COVERAGE_FLAGS, extra_flags, ar_tool)
    return cmds, tools


def _binary_cmds(c, linker_flags, pkg_config_libs, extra_flags='', shared=False, alwayslink=''):
    """Returns the commands needed for a cc_binary, cc_test or cc_shared_object rule."""
    tool, tools = _tool_path(CONFIG.LD_TOOL if CONFIG.LINK_WITH_LD_TOOL else
                             CONFIG.CC_TOOL if c else CONFIG.CPP_TOOL)
    flags = _binary_build_flags(linker_flags, pkg_config_libs, shared, alwayslink)
    cmds = {
        'dbg': '%s -o ${OUT} %s %s' % (tool, flags, extra_flags),
        'opt': '%s -o ${OUT} %s %s' % (tool, flags, extra_flags),
    }
    if CONFIG.CPP_COVERAGE:
        cmds['cover'] = '%s -o ${OUT} %s %s %s' % (tool, flags, extra_flags, _COVERAGE_FLAGS)
    return cmds, tools


def _library_transitive_labels(c, compiler_flags, pkg_config_libs):
    """Applies commands from transitive labels to a cc_library rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        flags = ['-isystem %s' % l[4:] for l in labels if l.startswith('inc:')]
        flags.extend('-D' + l[4:] for l in labels if l.startswith('def:'))
        if flags:  # Don't update if there aren't any relevant labels
            cmds, _ = _library_cmds(c, compiler_flags, pkg_config_libs, ' '.join(flags))
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels


def _binary_transitive_labels(c, linker_flags, pkg_config_libs, shared=False):
    """Applies commands from transitive labels to a cc_binary, cc_test or cc_shared_object rule."""
    def apply_transitive_labels(name):
        labels = get_labels(name, 'cc:')
        linker_prefix = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
        flags = [linker_prefix + l[3:] for l in labels if l.startswith('ld:')]
        flags.extend('`pkg-config --libs %s`' % l[3:] for l in labels if l.startswith('pc:'))
        # ./ here because some weak linkers don't realise ./lib.a is the same file as lib.a
        # and report duplicate symbol errors as a result.
        alwayslink = ' '.join('./' + l[3:] for l in labels if l.startswith('al:'))
        # Probably a little optimistic to check this (most binaries are likely to have *some*
        # kind of linker flags to apply), but we might as well.
        if flags or alwayslink:
            cmds, _ = _binary_cmds(c, linker_flags, pkg_config_libs, ' '.join(flags), shared, alwayslink)
            for k, v in cmds.items():
                set_command(name, k, v)
    return apply_transitive_labels


# C rules. These call straight through to the c++ versions and just set a flag.
def c_library(**kwargs):
    cc_library(_c=True, **kwargs)

def c_static_library(**kwargs):
    cc_static_library(_c=True, **kwargs)

def c_shared_object(**kwargs):
    cc_shared_object(_c=True, **kwargs)

def c_binary(**kwargs):
    cc_binary(_c=True, **kwargs)

def c_test(write_main=False, **kwargs):
    cc_test(_c=True, write_main=write_main, **kwargs)

def c_embed_binary(**kwargs):
    cc_embed_binary(**kwargs)


if CONFIG.BAZEL_COMPATIBILITY:
    # For nominal Buck compatibility. The cc_ forms are preferred.
    cxx_binary = cc_binary
    cxx_library = cc_library
    cxx_test = cc_test
