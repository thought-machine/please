""" Rules to build Go code.

Go has a strong built-in concept of packages so it's probably a good idea to match Please
rules to Go packages.
"""

_GOPATH = ' '.join('-I %s -I %s/pkg/%s_%s' % (p, p, CONFIG.OS, CONFIG.ARCH) for p in CONFIG.GOPATH.split(':'))
# This links all the .a files up one level. This is necessary for some Go tools to find them.
_LINK_PKGS_CMD = 'for i in `find . -name "*.a"`; do j=${i%/*}; ln -s $TMP_DIR/$i ${j%/*}; done'

# Applied to various rules to treat 'go' as a tool.
_GO_TOOL = ['go']


def go_library(name, srcs, out=None, deps=None, visibility=None, test_only=False,
               go_tools=None, complete=True, _needs_transitive_deps=False,_all_srcs=False):
    """Generates a Go library which can be reused by other rules.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      out (str): Name of the output library to compile (defaults to name suffixed with .a)
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
      go_tools (list): A list of targets to pre-process your src files with go generate.
      complete (bool): Indicates whether the library is complete or not (ie. buildable with
                       `go tool build -complete`). In nearly all cases this is True (the main
                       exception being for cgo).
    """
    deps = deps or []
    # go_test and cgo_library need access to the sources as well.
    filegroup(
        name='_%s#srcs' % name,
        srcs=srcs,
        exported_deps=deps,
        visibility=visibility,
        requires=['go'],
        test_only=test_only,
    )

    # Run go generate if needed.
    if go_tools:
        go_generate(
            name='_%s#gen' % name,
            srcs=srcs,
            tools=go_tools,
            deps=deps + [':_%s#srcs' % name],
            test_only=test_only,
        )
        srcs += [':_%s#gen' % name]

    return build_rule(
        name=name,
        srcs=srcs,
        deps=deps + [':_%s#srcs' % name],
        outs=[out or name + '.a'],
        cmd=_go_library_cmds(complete=complete, all_srcs=_all_srcs),
        visibility=visibility,
        building_description="Compiling...",
        requires=['go', 'go_src'] if _all_srcs else ['go'],
        provides={'go': ':' + name, 'go_src': ':_%s#srcs' % name},
        test_only=test_only,
        tools=_GO_TOOL,
        needs_transitive_deps=_needs_transitive_deps,
    )


def go_generate(name, srcs, tools, deps=None, visibility=None, test_only=False):
    """Generates a `go generate` rule.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to run go generate over.
      tools (list): A list of targets which represent binaries to be used via `go generate`.
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
    """
    # We simply capture all go files produced by go generate.
    def _post_build(rule_name, output):
        for out in output:
            if out.endswith('.go') and srcs and out not in srcs:
                add_out(rule_name, out)

    # All the tools must be in the $PATH.
    path = ':'.join('$(dirname $(location %s))' % tool for tool in tools)
    gopath = ' | '.join([
        'find . -type d -name src',
        'grep -v "^\.$"',
        'sed "s|^\.|$TMP_DIR|g"',
        'sed "/^\s*$/d"',
        'tr "\n" ":"',
        'sed -e "s/:$//" -e "s/src$//g"'
    ])
    cmd = ' && '.join([
        # It's essential that we copy all .a files up a directory as well; we tend to output them one level
        # down from where Go expects them to be.
        _LINK_PKGS_CMD,
        # It's also essential that the compiled .a files are under this prefix, otherwise gcimporter won't find them.
        'mkdir pkg',
        'ln -s $TMP_DIR pkg/%s_%s' % (CONFIG.OS, CONFIG.ARCH),
        'PATH="$PATH:%s" GOPATH="$TMP_DIR$(echo ":$(%s)" | sed "s/:$//g")" go generate $SRCS' % (path, gopath),
        'mv $PKG_DIR/*.go .',
        'ls *.go'
    ])
    build_rule(
        name=name,
        srcs=srcs,
        deps=deps,
        tools=_go_tool(tools),
        cmd=cmd,
        visibility=visibility,
        test_only=test_only,
        post_build=_post_build,
    )


def cgo_library(name, srcs, go_srcs=None, c_srcs=None, hdrs=None, out=None, compiler_flags=None,
                linker_flags=None, deps=None, visibility=None, test_only=False):
    """Generates a Go library which can be reused by other rules.

    Note that by its nature this is something of a hybrid of Go and C rules. It can depend
    on C / C++ rules, given the limitations of cgo (i.e. you will have to interact with them
    through a C interface, although the objects themselves can contain C++). As mentioned
    below, you will likely be better off wrapping your dependencies into a cc_static_library
    rule and depending on that rather than depending directly on cc_library rules.

    Note also that this does not honour Go's syntactic comments; you have to explicitly
    specify which Go files are cgo vs. which are not, as well as C headers & sources and
    any required cflags or ldflags.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile that have 'import "C"' declarations in them.
      go_srcs (list): Any Go source files that do *not* have 'import "C"' declarations.
      c_srcs (list): Any C source files to include.
      hdrs (list): Any C header files to include.
      out (str): Name of output file. Defaults to name + '.a'.
      compiler_flags (list): List of compiler flags to be passed when compiling the C code.
      linker_flags (list): List of linker flags to be passed when linking a Go binary.
      deps (list): Dependencies. Note that if you intend to depend on cc_library rules,
                   you will likely be better off wrapping them into a cc_static_library
                   and depending on that.
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
    """
    deps = deps or []
    go_srcs = go_srcs or []
    c_srcs = c_srcs or []
    hdrs = hdrs or []
    compiler_flags = compiler_flags or []
    linker_flags = linker_flags or []
    generated_go_srcs = [src.replace('.go', '.cgo1.go') for src in srcs] + ['_cgo_gotypes.go']
    generated_c_srcs = [src.replace('.go', '.cgo2.c') for src in srcs] + ['_cgo_export.c']
    generated_hdrs = ['_cgo_export.h']
    cgo_rule = build_rule(
        name = name,
        tag = 'cgo',
        srcs = srcs + hdrs,
        outs = [name + '_cgo'],
        cmd = ' && '.join([
            'mkdir $OUT',
            'cd $PKG_DIR',
            '$TOOL tool cgo -objdir $OUT -importpath ${PKG#*src/} *.go',
            # cgo leaves absolute paths in these files which we must get rid of :(
            'find $OUT -type f | xargs sed -i -e "s|$TMP_DIR/||g"',
        ]),
        tools = _GO_TOOL,
        requires = ['go', 'cc_hdrs'],
    )
    # Break up the outputs of the cgo rule into relevant bits.
    # TODO(pebers): This would be easier if we could indicate a dependency on a single
    #               output of a rule somehow...
    gen_go = _collect_files(name, 'gen_go', cgo_rule, generated_go_srcs, '.go')
    gen_c = _collect_files(name, 'gen_c', cgo_rule, generated_c_srcs, '.c')
    gen_h = _collect_files(name, 'gen_hdr', cgo_rule, generated_hdrs, '.h')
    # Compile the various bits
    c_library(
        name = '_%s#c' % name,
        srcs = [gen_c] + c_srcs,
        hdrs = [gen_h] + hdrs,
        compiler_flags = compiler_flags + [
            '-Wno-error',
            '-Wno-unused-parameter',  # Generated code doesn't compile clean
        ],
        test_only = test_only,
        deps = deps,
    )
    # Recompile the output of the C rule into an object suitable for Go's linker.
    ld_tool, tools = _tool_path(CONFIG.LD_TOOL if CONFIG.LINK_WITH_LD_TOOL else CONFIG.CC_TOOL)
    ar_tool, tools = _tool_path(CONFIG.AR_TOOL, tools)
    ld_flag = '' if CONFIG.LINK_WITH_LD_TOOL else '-Wl,'
    cgo_o_rule = build_rule(
        name = name,
        tag = 'cgo_o',
        srcs = [':_%s#c' % name],
        outs = [name + '_cgo.o'],
        cmd = '%s x $SRCS && %s -o $OUT %s-r -nostdlib *.o' % (ar_tool, ld_tool, ld_flag),
        requires = ['cc'],
        tools = tools,
    )
    go_rule = go_library(
        name = '_%s#go' % name,
        srcs = [gen_go] + go_srcs,
        test_only = test_only,
        complete = False,
        deps = deps,
    )
    # And finally combine the compiled C code into the Go archive object so go tool link can find it later.
    _merge_cgo_obj(
        name = name,
        a_rule = ':_%s#go' % name,
        o_rule = cgo_o_rule,
        visibility = visibility,
        test_only = test_only,
        linker_flags = linker_flags,
        out=out,
        provides = {
            'go': ':' + name,
            'go_src': go_rule,
            'cgo_obj': cgo_o_rule,
        },
    )


def _merge_cgo_obj(name, a_rule, o_rule=None, visibility=None, test_only=False, tag=None,
                   linker_flags=None, deps=None, provides=None, out=None):
    """Defines a rule to merge a cgo object into a Go library."""
    return build_rule(
        name = name,
        tag = tag,
        srcs = {
            'a': [a_rule],
            'o': [o_rule] if o_rule else [],
        },
        outs = [out or name + '.a'],
        cmd = 'cp $SRCS_A $OUT && chmod +w $OUT && $TOOL tool pack r $OUT $PKG_DIR/*_cgo.o',
        tools = _GO_TOOL,
        visibility = visibility,
        test_only = test_only,
        labels = ['cc:ld:' + flag for flag in (linker_flags or [])],
        requires = ['go', 'cgo_obj'],
        provides = provides,
        deps = deps,
    )


def go_binary(name, main=None, srcs=None, deps=None, visibility=None, test_only=False,
              static=False):
    """Compiles a Go binary.

    Args:
      name (str): Name of the rule.
      main (str): Deprecated, prefer srcs instead.
                  Go source file containing the main function.
      srcs (list): Go source files, one of which contains the main function.
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
      static (bool): If True, passes flags to the linker to try to force fully static linking.
                     (specifically `-linkmode external -extldflags static`).
                     Typically this increases size & link time a little but in return the binary
                     has absolutely no external dependencies.
                     Not yet tested against cgo.
    """
    if main:
        log.warning('"main" on go_binary is deprecated, prefer "srcs" instead.')
    go_library(
        name='_%s#lib' % name,
        srcs=srcs or [main or name + '.go'],
        deps=deps,
        test_only=test_only,
    )
    cmds, tools = _go_binary_cmds(static=static)
    build_rule(
        name=name,
        srcs=[':_%s#lib' % name],
        deps=deps,
        outs=[name],
        cmd=cmds,
        building_description="Linking...",
        needs_transitive_deps=True,
        binary=True,
        output_is_complete=True,
        test_only=test_only,
        tools=tools,
        visibility=visibility,
        requires=['go'],
        pre_build=_collect_linker_flags(static),
    )


def go_test(name, srcs, data=None, deps=None, visibility=None, flags='', container=False, cgo=False,
            timeout=0, flaky=0, test_outputs=None, labels=None, size=None):
    """Defines a Go test rule.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      data (list): Runtime data files for the test.
      deps (list): Dependencies
      visibility (list): Visibility specification
      flags (str): Flags to apply to the test invocation.
      container (bool | dict): True to run this test in a container.
      cgo (bool): True if this test depends on a cgo_library.
      timeout (int): Timeout in seconds to allow the test to run for.
      flaky (int | bool): True to mark the test as flaky, or an integer to specify how many reruns.
      test_outputs (list): Extra test output files to generate from this test.
      labels (list): Labels for this rule.
      size (str): Test size (enormous, large, medium or small).
    """
    deps = deps or []
    timeout, labels = _test_size_and_timeout(size, timeout, labels)
    # Unfortunately we have to recompile this to build the test together with its library.
    go_library(
        name = '_%s#lib' % name,
        srcs = srcs,
        out = name + ('_lib.a' if cgo else '.a'),
        deps = deps,
        test_only = True,
        _all_srcs = True,
        complete = False,
    )
    lib_rule = ':_%s#lib' % name
    if cgo:
        lib_rule = _merge_cgo_obj(
            name = name,
            tag = 'cgo',
            a_rule = lib_rule,
            visibility = visibility,
            test_only = True,
            deps = deps,
        )
    go_test_tool, tools = _tool_path(CONFIG.GO_TEST_TOOL, _GO_TOOL)
    build_rule(
        name='_%s#main' % name,
        srcs=srcs,
        outs=[name + '_main.go'],
        deps=deps,
        cmd={
            'dbg': '$TOOLS -o $OUT $SRCS',
            'opt': '$TOOLS -o $OUT $SRCS',
            'cover': '$TOOLS -d . -o $OUT $SRCS ',
        },
        needs_transitive_deps=True,  # Need all .a files to template coverage variables
        requires=['go'],
        test_only=True,
        tools=tools,
        post_build=_replace_test_package,
    )
    deps.append(lib_rule)
    go_library(
        name='_%s#main_lib' % name,
        srcs=[':_%s#main' % name],
        deps=deps,
        _needs_transitive_deps=True,  # Rather annoyingly this is only needed for coverage
        test_only=True,
    )
    cmds, tools = _go_binary_cmds()
    build_rule(
        name=name,
        srcs=[':_%s#main_lib' % name],
        data=data,
        deps=deps,
        outs=[name],
        tools=tools,
        cmd=cmds,
        test_cmd='$TEST %s | tee test.results' % flags,
        visibility=visibility,
        container=container,
        test_timeout=timeout,
        flaky=flaky,
        test_outputs=test_outputs,
        requires=['go'],
        labels=labels,
        binary=True,
        test=True,
        building_description="Compiling...",
        needs_transitive_deps=True,
        output_is_complete=True,
    )


def cgo_test(name, srcs, data=None, deps=None, visibility=None, flags='', container=False,
            timeout=0, flaky=0, test_outputs=None, labels=None, size=None):
    """Defines a Go test rule over a cgo_library.

    If the library you are testing is a cgo_library, you must use this instead of go_test.
    It's ok to depend on a cgo_library though as long as it's not the same package
    as your test; in that (any any other case of testing a go_library) you must use go_test.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      data (list): Runtime data files for the test.
      deps (list): Dependencies
      visibility (list): Visibility specification
      flags (str): Flags to apply to the test invocation.
      container (bool | dict): True to run this test in a container.
      timeout (int): Timeout in seconds to allow the test to run for.
      flaky (int | bool): True to mark the test as flaky, or an integer to specify how many reruns.
      test_outputs (list): Extra test output files to generate from this test.
      labels (list): Labels for this rule.
      size (str): Test size (enormous, large, medium or small).
    """
    go_test(
        name = name,
        srcs = srcs,
        data = data,
        deps = deps,
        cgo = True,
        visibility = visibility,
        flags = flags,
        container = container,
        timeout = timeout,
        flaky = flaky,
        test_outputs = test_outputs,
        labels = labels,
        size = size,
    )


def go_get(name, get=None, outs=None, deps=None, exported_deps=None, visibility=None, patch=None,
           binary=False, test_only=False, install=None, revision=None, strip=None):
    """Defines a dependency on a third-party Go library.

    Args:
      name (str): Name of the rule
      get (str): Target to get (eg. "github.com/gorilla/mux")
      outs (list): Output files from the rule. Default autodetects.
      deps (list): Dependencies
      exported_deps (list): Dependencies to make available to anything using this rule.
      visibility (list): Visibility specification
      patch (str): Patch file to apply
      binary (bool): True if the output of the rule is a binary.
      test_only (bool): If true this rule will only be visible to tests.
      install (list): Allows specifying extra packages to install. Convenient in some cases where we
                      want to go get something with an extra subpackage.
      revision (str): Git hash to check out before building. Only works for git at present,
                      not for other version control systems.
      strip (list): List of paths to strip from the installed target.
    """
    post_build = None
    if binary and outs and len(outs) != 1:
        raise ValueError(name + ': Binary rules can only have a single output')
    if not outs:
        outs = [('bin/' + name) if binary else ('src/' + get)]
        if not binary:
            post_build = _extra_outs(get)
    cmd = [
        # the TMP_DIR contains all the compiled dependencies already. Later when
        # we go install, it is difficult to seperate its outputs from the
        # deps outputs, hence why we capture them here in advance
        'export existing="$(find $TMP_DIR -name \"*.a\")"',

        # go_get dependencies could be in different paths, make sure they are
        # all available in the GOPATH by detecting their pkg/ folder and using its parent
        'export GOPATH="$TMP_DIR"',
        # loop done like this because the GOPATH export should not be in a SubShell
        'while IFS= read -r dep_dir; do '
        'if [ -n "$dep_dir" ]; then export GOPATH="${dep_dir}:${GOPATH}" ; fi ; done '
        '< <(echo "$existing" | sed -e \'s|pkg/.*||g\' | sort -u)',

        'export INSTALL_DIR=$(mktemp -d ${TMP_DIR}/tmp.XXXXX)',
        'export GOPATH="$INSTALL_DIR:$GOPATH"',

        'cd $INSTALL_DIR',
        'go get -d ' + get,
    ]
    subdir = 'src/' + (get[:-4] if get.endswith('/...') else get)
    if revision:
        # Annoyingly -C does not work on git checkout :(
        cmd.append('(cd %s && git checkout -q %s)' % (subdir, revision))
    if patch:
        cmd.append('patch -s -d %s -p1 < ${TMP_DIR}/$(location %s)' % (subdir, patch))
    cmd.append('go install -gcflags "-trimpath $INSTALL_DIR" ' + ' '.join([get] + (install or [])))
    # Remove anything that was there already.
    cmd.extend([
        # go_get built dependencies could be in different dirs so we strip the prefix
        # leading up to `/pkg/`. These have been cached in the "$INSTALL_DIR/pkg/.."
        # during the `go install`. So clean them up from this target's outputs
        'echo "$existing" | while IFS= read -r pathname; do '
        'if [ -n "$pathname" ]; then rm -f "$INSTALL_DIR/pkg/${pathname#*/pkg/}" ; fi ; done',
        'cd $TMP_DIR',
        # delete all other dirs with deps. Only src,pkg and maybe bin will remain
        'ls | grep -v $(basename $INSTALL_DIR) | xargs rm -rf',
        'mv $INSTALL_DIR/* $TMP_DIR/'
    ])
    if not binary:
        cmd.extend([
            'find . -name .git | xargs rm -rf',
            'find pkg -name "*.a" | sort',
        ])
    if strip:
        cmd.extend('rm -rf %s/%s' % (subdir, s) for s in strip)
    build_rule(
        name=name,
        srcs=[patch] if patch else [],
        outs=outs,
        deps=deps,
        exported_deps=exported_deps,
        tools=_GO_TOOL,
        visibility=visibility,
        building_description='Fetching...',
        cmd=' && '.join(cmd),
        binary=binary,
        requires=['go'],
        test_only=test_only,
        post_build=post_build,
        labels=['go_get:%s@%s' % (get, revision) if revision else 'go_get:%s' % get],
    )


def go_yacc(name, src, out=None, visibility=None, labels=None):
    """Defines a rule that invokes 'go tool yacc' to generate Go source using yacc.

    Args:
      name (str): Name of the rule.
      src (str): Source file for the rule. There can be only one.
      out (str): Output file for the rule. Defaults to name + '.yacc.go'.
      visibility (list): Visibility specification.
      labels (list): Labels for this rule.
    """
    log.warning('go_yacc is deprecated since the yacc tool is removed from go 1.8')
    build_rule(
        name = name,
        srcs = [src],
        outs = [out or name + '.yacc.go'],
        tools = _GO_TOOL,
        cmd = 'go tool yacc -o $OUT $SRC',
        building_description = 'yaccing...',
        visibility = visibility,
        labels = labels,
        requires = ['go'],
    )


def _extra_outs(get):
    """Attaches extra outputs to go_get rules."""
    def _inner(name, output):
        last = '<>'
        for archive in output:
            try:
                add_out(name, archive)
                subpath = archive[archive.find('/', 6) + 1:-2]
                if (not subpath.startswith(get) and not subpath.startswith(last) and
                    not get.startswith(subpath) and not last.startswith(subpath)):
                        add_out(name, 'src/' + subpath)
            except ParseError:
                log.error("Looks like you have two go_get rules trying to output the "
                          "same file; most likely you need to add some dependencies so "
                          "that shared file is built independently.")
                raise
            last = subpath
    return _inner


def _replace_test_package(name, output):
    """Post-build function, called after we template the main function.

    The purpose is to replace the real library with the specific one we've
    built for this test which has the actual test functions in it.
    """
    if not name.endswith('#main') or not name.startswith('_'):
        raise ValueError('unexpected rule name: ' + name)
    lib = name[:-5] + '#main_lib'
    new_name = name[1:-5]
    for line in output:
        if line.startswith('Package: '):
            ldflags = ' '.join(get_labels(name, 'cc:ld:'))
            binary_cmds, _ = _go_binary_cmds(ldflags=ldflags)
            pkg_name = line[9:]
            if pkg_name != new_name or ldflags:  # Might not be necessary if names match already.
                for k, v in binary_cmds.items():
                    set_command(new_name, k, 'mv -f ${PKG_DIR}/%s.a ${PKG_DIR}/%s.a && %s' % (new_name, pkg_name, v))
                for k, v in _go_library_cmds().items():
                    set_command(lib, k, 'mv -f ${PKG_DIR}/%s.a ${PKG_DIR}/%s.a && %s' % (new_name, pkg_name, v))


def _go_tool(tools):
    """Returns the given list annotated with the 'go' tool.

    Currently the tool invoked for 'go' is not configurable.
    """
    return (tools or []) + ['go']


def _collect_files(name, tag, dep, outs, extension):
    """Defines a rule to collect a subset of outputs from another rule.

    Used mostly for cgo which spits out many different kinds of thing.
    """
    # Handle sources that are actually build rules.
    # TODO(pebers): This is overly awkward to need to use a post-build rule for, can we do
    #               something more lightweight?
    file_outs = [out for out in outs if not out.startswith('/') and not out.startswith(':')]
    return build_rule(
        name = name,
        tag = tag,
        srcs = [dep],
        outs = file_outs,
        cmd = 'mv $PKG_DIR/%s_cgo/* . && ls *%s' % (name, extension),
        post_build = _collect_rule_outs if file_outs != outs else None,
    )


def _collect_rule_outs(name, output):
    for line in output:
        if line != '_cgo_main.c':
            add_out(name, line)


def _go_library_cmds(complete=True, all_srcs=False):
    """Returns the commands to run for building a Go library."""
    go_compile_tool = 'compile' if CONFIG.GO_VERSION >= "1.5" else '6g'
    # Invokes the Go compiler.
    complete_flag = '-complete ' if complete else ''
    compile_cmd = 'go tool %s -trimpath $TMP_DIR %s%s -pack -o $OUT ' % (go_compile_tool, complete_flag, _GOPATH)
    # Annotates files for coverage
    cover_cmd = 'for SRC in $SRCS; do mv -f $SRC _tmp.go; BN=$(basename $SRC); go tool cover -mode=set -var=GoCover_${BN//./_} _tmp.go > $SRC; done'
    srcs = 'export SRCS="$PKG_DIR/*.go"; ' if all_srcs else ''
    return {
        'dbg': '%s%s; %s -N -l $SRCS' % (srcs, _LINK_PKGS_CMD, compile_cmd),
        'opt': '%s%s; %s $SRCS' % (srcs, _LINK_PKGS_CMD, compile_cmd),
        'cover': '%s%s; %s && %s $SRCS' % (srcs, _LINK_PKGS_CMD, cover_cmd, compile_cmd),
    }


def _go_binary_cmds(static=False, ldflags=''):
    """Returns the commands to run for linking a Go binary."""
    _go_link_tool = 'link' if CONFIG.GO_VERSION >= "1.5" else '6l'
    extld_tool, tools = _tool_path(CONFIG.LD_TOOL if CONFIG.LINK_WITH_LD_TOOL else CONFIG.CC_TOOL, _GO_TOOL)
    _link_cmd = 'go tool %s -tmpdir $TMP_DIR -extld %s %s -L . -o ${OUT} ' % (_go_link_tool, extld_tool, _GOPATH.replace('-I ', '-L '))

    if static:
        flags = '-linkmode external -extldflags "-static %s"' % ldflags
    elif ldflags:
        flags = '-extldflags "%s"' % ldflags
    else:
        flags = ''

    return {
        'dbg': '%s; %s %s $SRCS' % (_LINK_PKGS_CMD, _link_cmd, flags),
        'opt': '%s; %s %s -s -w $SRCS' % (_LINK_PKGS_CMD, _link_cmd, flags),
    }, tools


def _collect_linker_flags(static):
    """Returns a pre-build function to apply transitive linker flags to a go_binary rule."""
    def collect_linker_flags(name):
        ldflags = ' '.join(get_labels(name, 'cc:ld:'))
        cmds, _ =  _go_binary_cmds(static=static, ldflags=ldflags)
        for k, v in cmds.items():
            set_command(name, k, v)
    return collect_linker_flags
