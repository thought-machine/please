""" Rules to build Go code.

Go has a strong built-in concept of packages so it's probably a good idea to match Please
rules to Go packages.
"""

_GOPATH = ' '.join(['-I %s -I %s/pkg/%s_%s' % (p, p, CONFIG.OS, CONFIG.ARCH) for p in CONFIG.GOPATH.split(':')])
# This links all the .a files up one level. This is necessary for some Go tools to find them.
_LINK_PKGS_CMD = ' '.join([
    'for FN in `find . -name "*.a" | sort`; do ',
    'DN=${FN%/*}; BN=${FN##*/}; if [ "${DN##*/}" == "${BN%.a}" ]; then ',
    'ln -s $TMP_DIR/$FN ${DN%/*}; fi; done'
])


def go_library(name:str, srcs:list, asm_srcs:list=None, hdrs:list=None, out:str=None, deps:list=None,
               visibility:list=None, test_only:bool=False, go_tools:list=None, complete:bool=True,
               _needs_transitive_deps=False, _all_srcs=False, cover:bool=True):
    """Generates a Go library which can be reused by other rules.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      asm_srcs (list): Source files to assemble with `go tool assemble`.
      hdrs (list): Header files needed for assembly. Has no effect if asm_srcs is not given.
      out (str): Name of the output library to compile (defaults to name suffixed with .a)
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
      go_tools (list): A list of targets to pre-process your src files with go generate.
      complete (bool): Indicates whether the library is complete or not (ie. buildable with
                       `go tool build -complete`). In nearly all cases this is True (the main
                       exception being for cgo).
      cover (bool): Indicates whether this library should be considered for coverage annotations.
                    Libraries are only annotated when using `plz cover` (or `plz build -c cover`),
                    but if this is false they never will be. Can be useful for e.g. third-party
                    code that you never want to be instrumented.
    """
    if asm_srcs:
        lib_rule = go_library(
            name = '_%s#lib' % name,
            srcs = srcs,
            deps = deps,
            test_only = test_only,
            go_tools = go_tools,
            complete = False,
            cover = cover,
            _needs_transitive_deps = _needs_transitive_deps,
            _all_srcs = _all_srcs,
        )
        asm_rule = build_rule(
            name = name,
            tag = 'asm',
            srcs = {
                'asm': asm_srcs,
                'hdrs': hdrs,
            },
            outs = [name + '.o'],
            building_description = 'Assembling...',
            cmd = 'eval `$TOOL env` && $TOOL tool asm -trimpath $TMP_DIR -I ${GOROOT}/pkg/include -D GOOS_${OS} -D GOARCH_${ARCH} -o $OUT $SRCS_ASM',
            tools=[CONFIG.GO_TOOL],
            test_only = test_only,
        )
        return build_rule(
            name = name,
            srcs = {
                'lib': [lib_rule],
                'asm': [asm_rule],
            },
            outs=[out or name + '.a'],
            tools=[CONFIG.GO_TOOL],
            cmd = 'cp $SRCS_LIB $OUT && chmod +w $OUT && $TOOL tool pack r $OUT $SRCS_ASM',
            visibility = visibility,
            building_description = 'Packing...',
            requires = ['go'],
            provides = {'go': ':' + name, 'go_src': lib_rule},
            test_only = test_only,
        )

    deps = deps or []
    # go_test and cgo_library need access to the sources as well.
    src_rule = filegroup(
        name = name,
        tag = 'srcs',
        srcs=srcs,
        exported_deps=deps,
        visibility=visibility,
        requires=['go'],
        test_only=test_only,
    )

    # Run go generate if needed.
    if go_tools:
        gen_rule = go_generate(
            name='_%s#gen' % name,
            srcs=srcs,
            tools=go_tools,
            deps=deps + [src_rule],
            test_only=test_only,
        )
        srcs += [gen_rule]

    return build_rule(
        name=name,
        srcs=srcs,
        deps=deps + [src_rule],
        outs=[out or name + '.a'],
        cmd=_go_library_cmds(complete=complete, all_srcs=_all_srcs, cover=cover),
        visibility=visibility,
        building_description="Compiling...",
        requires=['go', 'go_src'] if _all_srcs else ['go'],
        provides={'go': ':' + name, 'go_src': src_rule},
        test_only=test_only,
        tools=[CONFIG.GO_TOOL],
        needs_transitive_deps=_needs_transitive_deps,
    )


def go_generate(name:str, srcs:list, tools:list, deps:list=None, visibility:list=None, test_only:bool=False):
    """Generates a `go generate` rule.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to run go generate over.
      tools (list): A list of targets which represent binaries to be used via `go generate`.
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
    """
    # We simply capture all go files produced by go generate.
    def _post_build(rule_name, output):
        for out in output:
            if out.endswith('.go') and srcs and out not in srcs:
                add_out(rule_name, out)

    # All the tools must be in the $PATH.

    gopath = ' | '.join([
        'find . -type d -name src',
        'grep -v "^\.$"',
        'sed "s|^\.|$TMP_DIR|g"',
        'sed "/^\s*$/d"',
        'tr "\n" ":"',
        'sed -e "s/:$//" -e "s/src$//g"'
    ])
    cmd = ' && '.join([
        # It's essential that we copy all .a files up a directory as well; we tend to output them one level
        # down from where Go expects them to be.
        _LINK_PKGS_CMD,
        # It's also essential that the compiled .a files are under this prefix, otherwise gcimporter won't find them.
        'mkdir pkg',
        'ln -s $TMP_DIR pkg/%s_%s' % (CONFIG.OS, CONFIG.ARCH),
        'export PATH="$(echo "$TOOLS_GEN " | sed -E -e \'s|/[^/]+[ ]|:|g\')$PATH"',
        'GOPATH="$TMP_DIR$(echo ":$(%s)" | sed "s/:$//g")" $TOOLS_GO generate $SRCS' % gopath,
        'mv $PKG_DIR/*.go .',
        'ls *.go'
    ])
    return build_rule(
        name=name,
        srcs=srcs,
        deps=deps,
        tools={
            'go': [CONFIG.GO_TOOL],
            'gen': tools,
        },
        cmd=cmd,
        visibility=visibility,
        test_only=test_only,
        post_build=_post_build,
    )


def cgo_library(name:str, srcs:list, go_srcs:list=None, c_srcs:list=None, hdrs:list=None,
                out:str=None, compiler_flags:list=None, linker_flags:list=None, pkg_config:list=None,
                subdir:str='', deps:list=None, visibility:list=None, test_only:bool=False):
    """Generates a Go library which can be reused by other rules.

    Note that by its nature this is something of a hybrid of Go and C rules. It can depend
    on C / C++ rules, given the limitations of cgo (i.e. you will have to interact with them
    through a C interface, although the objects themselves can contain C++). As mentioned
    below, you will likely be better off wrapping your dependencies into a cc_static_library
    rule and depending on that rather than depending directly on cc_library rules.

    Note also that this does not honour Go's syntactic comments; you have to explicitly
    specify which Go files are cgo vs. which are not, as well as C headers & sources and
    any required cflags or ldflags.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile that have 'import "C"' declarations in them.
      go_srcs (list): Any Go source files that do *not* have 'import "C"' declarations.
      c_srcs (list): Any C source files to include.
      hdrs (list): Any C header files to include.
      out (str): Name of output file. Defaults to name + '.a'.
      compiler_flags (list): List of compiler flags to be passed when compiling the C code.
      linker_flags (list): List of linker flags to be passed when linking a Go binary.
      pkg_config (list): List of packages to pass to pkg-config.
      subdir (str): Subdirectory that source files are in. Required if they're not in the
                    current directory.
      deps (list): Dependencies. Note that if you intend to depend on cc_library rules,
                   you will likely be better off wrapping them into a cc_static_library
                   and depending on that.
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
    """
    deps = deps or []
    go_srcs = go_srcs or []
    c_srcs = c_srcs or []
    hdrs = hdrs or []
    compiler_flags = compiler_flags or []
    linker_flags = linker_flags or []
    file_srcs = [src for src in srcs if not src.startswith('/') and not src.startswith(':')]
    post_build = lambda rule, output: [add_out(rule, 'c' if line.endswith('.c') else 'go', line) for line in output]
    subdir2 = (subdir + '/') if subdir and not subdir.endswith('/') else subdir

    cgo_rule = build_rule(
        name = name,
        tag = 'cgo',
        srcs = srcs + hdrs,
        outs = {
            'go': [subdir2 + src.replace('.go', '.cgo1.go') for src in file_srcs] + [subdir2 + '_cgo_gotypes.go'],
            'c': [subdir2 + src.replace('.go', '.cgo2.c') for src in file_srcs] + [subdir2 + '_cgo_export.c'],
            'h': [subdir2 + '_cgo_export.h'],
        },
        cmd = ' && '.join([
            ('OUT_DIR="$TMP_DIR/%s"' % subdir) if subdir else 'OUT_DIR="$TMP_DIR"',
            'mkdir -p $OUT_DIR',
            'cd $PKG_DIR/' + subdir,
            '$TOOL tool cgo -objdir $OUT_DIR -importpath ${PKG#*src/} *.go',
            # Remove the .o file which BSD sed gets upset about in the next command
            'rm -f $OUT_DIR/_cgo_.o $OUT_DIR/_cgo_main.c',
            # cgo leaves absolute paths in these files which we must get rid of :(
            'find $OUT_DIR -type f -maxdepth 1 | xargs sed -i -e "s|$TMP_DIR/||g"',
            'cd $TMP_DIR',
            'ls %s*.c %s*.go' % (subdir2, subdir2),
        ]),
        tools = [CONFIG.GO_TOOL],
        post_build = post_build if file_srcs != srcs else None,
        requires = ['go', 'cc_hdrs'],
    )

    # Compile the various bits
    c_rule = c_library(
        name = '_%s#c' % name,
        srcs = [cgo_rule + '|c'] + c_srcs,
        hdrs = [cgo_rule + '|h'] + hdrs,
        compiler_flags = compiler_flags + [
            '-Wno-error',
            '-Wno-unused-parameter',  # Generated code doesn't compile clean
        ],
        pkg_config_libs = pkg_config,
        test_only = test_only,
        deps = deps,
    )
    go_rule = go_library(
        name = '_%s#go' % name,
        srcs = [cgo_rule + '|go'] + go_srcs,
        test_only = test_only,
        complete = False,
        deps = deps,
    )
    # And finally combine the compiled C code into the Go archive object so go tool link can find it later.
    return _merge_cgo_obj(
        name = name,
        a_rule = ':_%s#go' % name,
        o_rule = c_rule,
        visibility = visibility,
        test_only = test_only,
        linker_flags = linker_flags,
        out=out,
        provides = {
            'go': ':' + name,
            'go_src': go_rule,
            'cgo': c_rule,
        },
        deps = deps,
    )


def _merge_cgo_obj(name, a_rule, o_rule=None, visibility=None, test_only=False, tag='',
                   linker_flags=None, deps=None, provides=None, out=None):
    """Defines a rule to merge a cgo object into a Go library."""
    if o_rule:
        cmd = 'cp $SRCS_A $OUT && chmod +w $OUT && $TOOLS_AR x $SRCS_O && $TOOLS_GO tool pack r $OUT *.o'
    else:
        cmd = 'cp $SRCS_A $OUT && chmod +w $OUT && $TOOLS_AR x $PKG/*#c.a && $TOOLS_GO tool pack r $OUT *.o'

    return build_rule(
        name = name,
        tag = tag,
        srcs = {
            'a': [a_rule],
            'o': [o_rule] if o_rule else [],
        },
        outs = [out or name + '.a'],
        cmd = cmd,
        tools = {
            'go': [CONFIG.GO_TOOL],
            'ar': [CONFIG.AR_TOOL],
        },
        visibility = visibility,
        test_only = test_only,
        labels = ['cc:ld:' + flag for flag in (linker_flags or [])],
        requires = ['go', 'cgo'],
        provides = provides,
        deps = deps,
    )


def go_binary(name:str, srcs:list=None, asm_srcs:list=None, out:str=None, deps:list=None,
              visibility:list=None, test_only:bool=False, static:bool=False):
    """Compiles a Go binary.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files, one of which contains the main function.
      asm_srcs (list): Assembly source files.
      out (str): Name of the output file to create. Defaults to the same as `name`.
      deps (list): Dependencies
      visibility (list): Visibility specification
      test_only (bool): If True, is only visible to test rules.
      static (bool): If True, passes flags to the linker to try to force fully static linking.
                     (specifically `-linkmode external -extldflags static`).
                     Typically this increases size & link time a little but in return the binary
                     has absolutely no external dependencies.
                     Note that it may have negative consequences if the binary contains any cgo
                     (including net/http DNS lookup code potentially).
    """
    go_library(
        name='_%s#lib' % name,
        srcs=srcs or [name + '.go'],
        asm_srcs=asm_srcs,
        deps=deps,
        test_only=test_only,
    )
    cmds, tools = _go_binary_cmds(static=static)
    return build_rule(
        name=name,
        srcs=[':_%s#lib' % name],
        deps=deps,
        outs=[out or name],
        cmd=cmds,
        building_description="Linking...",
        needs_transitive_deps=True,
        binary=True,
        output_is_complete=True,
        test_only=test_only,
        tools=tools,
        visibility=visibility,
        requires=['go'],
        pre_build=_collect_linker_flags(static),
    )


def go_test(name:str, srcs:list, data:list=None, deps:list=None, visibility:list=None,
            flags:str='', container:bool|dict=False, sandbox:bool=None, cgo:bool=False,
            external:bool=False, timeout:int=0, flaky:bool|int=0, test_outputs:list=None,
            labels:list=None, size:str=None, static:bool=False):
    """Defines a Go test rule.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      data (list): Runtime data files for the test.
      deps (list): Dependencies
      visibility (list): Visibility specification
      flags (str): Flags to apply to the test invocation.
      container (bool | dict): True to run this test in a container.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      cgo (bool): True if this test depends on a cgo_library.
      external (bool): True if this test is external to the library it's testing, i.e. it uses the
                       feature of Go that allows it to be in the same directory with a _test suffix.
      timeout (int): Timeout in seconds to allow the test to run for.
      flaky (int | bool): True to mark the test as flaky, or an integer to specify how many reruns.
      test_outputs (list): Extra test output files to generate from this test.
      labels (list): Labels for this rule.
      size (str): Test size (enormous, large, medium or small).
      static (bool): If True, passes flags to the linker to try to force fully static linking.
                     (specifically `-linkmode external -extldflags static`).
                     Typically this increases size & link time a little but in return the binary
                     has absolutely no external dependencies.
                     Note that it may have negative consequences if the binary contains any cgo
                     (including net/http DNS lookup code potentially).
    """
    deps = deps or []
    timeout, labels = _test_size_and_timeout(size, timeout, labels)
    # Unfortunately we have to recompile this to build the test together with its library.
    lib_rule = go_library(
        name = '_%s#lib' % name,
        srcs = srcs,
        out = name + ('_lib.a' if cgo else '.a'),
        deps = deps,
        test_only = True,
        _all_srcs = not external,
        complete = False,
    )
    if cgo:
        lib_rule = _merge_cgo_obj(
            name = name,
            tag = 'cgo',
            a_rule = lib_rule,
            visibility = visibility,
            test_only = True,
            deps = deps,
        )
    build_rule(
        name='_%s#main' % name,
        srcs=srcs,
        outs=[name + '_main.go'],
        deps=deps,
        cmd={
            'dbg': '$TOOLS_TEST $TOOLS_GO -o $OUT $SRCS',
            'opt': '$TOOLS_TEST $TOOLS_GO -o $OUT $SRCS',
            'cover': '$TOOLS_TEST $TOOLS_GO -d . -o $OUT $SRCS ',
        },
        needs_transitive_deps=True,  # Need all .a files to template coverage variables
        requires=['go'],
        test_only=True,
        tools={
            'go': [CONFIG.GO_TOOL],
            'test': [CONFIG.GO_TEST_TOOL],
        },
        post_build=lambda name, output: _replace_test_package(name, output, static),
    )
    deps.append(lib_rule)
    go_library(
        name='_%s#main_lib' % name,
        srcs=[':_%s#main' % name],
        deps=deps,
        _needs_transitive_deps=True,  # Rather annoyingly this is only needed for coverage
        test_only=True,
    )
    cmds, tools = _go_binary_cmds(static=static)
    build_rule(
        name=name,
        srcs=[':_%s#main_lib' % name],
        data=data,
        deps=deps,
        outs=[name],
        tools=tools,
        cmd=cmds,
        test_cmd='$TEST %s | tee test.results' % flags,
        visibility=visibility,
        container=container,
        test_sandbox=sandbox,
        test_timeout=timeout,
        flaky=flaky,
        test_outputs=test_outputs,
        requires=['go'],
        labels=labels,
        binary=True,
        test=True,
        building_description="Compiling...",
        needs_transitive_deps=True,
        output_is_complete=True,
    )


def cgo_test(name:str, srcs:list, data:list=None, deps:list=None, visibility:list=None,
             flags:str='', container:bool|dict=False, sandbox:bool=None, timeout:int=0, flaky:bool|int=0,
             test_outputs:list=None, labels:list=None, size:str=None, static:bool=False):
    """Defines a Go test rule over a cgo_library.

    If the library you are testing is a cgo_library, you must use this instead of go_test.
    It's ok to depend on a cgo_library though as long as it's not the same package
    as your test; in that (any any other case of testing a go_library) you must use go_test.

    Args:
      name (str): Name of the rule.
      srcs (list): Go source files to compile.
      data (list): Runtime data files for the test.
      deps (list): Dependencies
      visibility (list): Visibility specification
      flags (str): Flags to apply to the test invocation.
      container (bool | dict): True to run this test in a container.
      sandbox (bool): Sandbox the test on Linux to restrict access to namespaces such as network.
      timeout (int): Timeout in seconds to allow the test to run for.
      flaky (int | bool): True to mark the test as flaky, or an integer to specify how many reruns.
      test_outputs (list): Extra test output files to generate from this test.
      labels (list): Labels for this rule.
      size (str): Test size (enormous, large, medium or small).
      static (bool): If True, passes flags to the linker to try to force fully static linking.
                     (specifically `-linkmode external -extldflags static`).
                     Typically this increases size & link time a little but in return the binary
                     has absolutely no external dependencies.
                     It may not be easy to make cgo tests work when linked statically; depending
                     on your toolchain it may not be possible or may fail.
    """
    go_test(
        name = name,
        srcs = srcs,
        data = data,
        deps = deps,
        cgo = True,
        static = static,
        visibility = visibility,
        flags = flags,
        container = container,
        sandbox = sandbox,
        timeout = timeout,
        flaky = flaky,
        test_outputs = test_outputs,
        labels = labels,
        size = size,
    )


def go_get(name:str, get:str, outs:list=None, deps:list=None, exported_deps:list=None,
           visibility:list=None, patch:str=None, binary:bool=False, test_only:bool=False,
           install:list=None, revision:str=None, strip:list=None):
    """Defines a dependency on a third-party Go library.

    Args:
      name (str): Name of the rule
      get (str): Target to get (eg. "github.com/gorilla/mux")
      outs (list): Output files from the rule. Default autodetects.
      deps (list): Dependencies
      exported_deps (list): Dependencies to make available to anything using this rule.
      visibility (list): Visibility specification
      patch (str): Patch file to apply
      binary (bool): True if the output of the rule is a binary.
      test_only (bool): If true this rule will only be visible to tests.
      install (list): Allows specifying extra packages to install. Convenient in some cases where we
                      want to go get something with an extra subpackage.
      revision (str): Git hash to check out before building. Only works for git at present,
                      not for other version control systems.
      strip (list): List of paths to strip from the installed target.
    """
    post_build = None
    if binary and outs and len(outs) != 1:
        raise ValueError(name + ': Binary rules can only have a single output')
    getroot = get[:-4] if get.endswith('/...') else get
    subdir = 'src/' + getroot
    if not outs:
        outs = [('bin/' + name) if binary else ('src/' + getroot)]
        if not binary:
            post_build = _extra_outs(getroot)
    cmd = [
        # the TMP_DIR contains all the compiled dependencies already. Later when
        # we go install, it is difficult to seperate its outputs from the
        # deps outputs, hence why we capture them here in advance
        'export existing="$(find $TMP_DIR -name \"*.a\")"',

        # go_get dependencies could be in different paths, make sure they are
        # all available in the GOPATH by detecting their pkg/ folder and using its parent
        'export GOPATH="$TMP_DIR"',
        # loop done like this because the GOPATH export should not be in a SubShell
        'while IFS= read -r dep_dir; do '
        'if [ -n "$dep_dir" ]; then export GOPATH="${dep_dir}:${GOPATH}" ; fi ; done '
        '< <(echo "$existing" | sed -e \'s|pkg/.*||g\' | sort -u)',

        'export INSTALL_DIR=$(mktemp -d ${TMP_DIR}/tmp.XXXXX)',
        'export GOPATH="$INSTALL_DIR:$GOPATH"',

        'cd $INSTALL_DIR',
        '$TOOL get -d ' + get,
    ]
    if revision:
        # Annoyingly -C does not work on git checkout :(
        cmd.append('(cd %s && git checkout -q %s)' % (subdir, revision))
    if patch:
        cmd.append('patch -s -d %s -p1 < ${TMP_DIR}/$(location %s)' % (subdir, patch))
    cmd.append('$TOOL install -gcflags "-trimpath $INSTALL_DIR" ' + ' '.join([get] + (install or [])))
    # Remove anything that was there already.
    cmd.extend([
        # go_get built dependencies could be in different dirs so we strip the prefix
        # leading up to `/pkg/`. These have been cached in the "$INSTALL_DIR/pkg/.."
        # during the `go install`. So clean them up from this target's outputs
        'echo "$existing" | while IFS= read -r pathname; do '
        'if [ -n "$pathname" ]; then rm -f "$INSTALL_DIR/pkg/${pathname#*/pkg/}" ; fi ; done',
        'cd $TMP_DIR',
        # delete all other dirs with deps. Only src,pkg and maybe bin will remain
        'ls | (grep -v $(basename $INSTALL_DIR) || true) | xargs rm -rf',
        'mv $INSTALL_DIR/* $TMP_DIR/'
    ])
    if not binary:
        cmd.extend([
            'find . -name .git | xargs rm -rf',
            'find pkg -name "*.a" | sort',
        ])
    if strip:
        cmd.extend(['rm -rf %s/%s' % (subdir, s) for s in strip])
    build_rule(
        name=name,
        srcs=[patch] if patch else [],
        outs=outs,
        deps=deps,
        exported_deps=exported_deps,
        tools=[CONFIG.GO_TOOL],
        visibility=visibility,
        building_description='Fetching...',
        cmd=' && '.join(cmd),
        binary=binary,
        requires=['go'],
        test_only=test_only,
        post_build=post_build,
        labels=['go_get:%s@%s' % (get, revision) if revision else 'go_get:%s' % get],
        sandbox = False,
    )


def _extra_outs(get):
    """Attaches extra outputs to go_get rules."""
    def _inner(name, output):
        last = '<>'
        for archive in output:
            add_out(name, archive)
            before, _, after = archive[6:-2].partition('/')
            subpath = after or before
            if ((not subpath.startswith(get)) and (not subpath.startswith(last)) and
                (not get.startswith(subpath)) and (not last.startswith(subpath))):
                    add_out(name, 'src/' + subpath)
            last = subpath
    return _inner


def _replace_test_package(name, output, static):
    """Post-build function, called after we template the main function.

    The purpose is to replace the real library with the specific one we've
    built for this test which has the actual test functions in it.
    """
    if not name.endswith('#main') or not name.startswith('_'):
        raise ValueError('unexpected rule name: ' + name)
    lib = name[:-5] + '#main_lib'
    new_name = name[1:-5]
    for line in output:
        if line.startswith('Package: '):
            ldflags, pkg_config = _get_ldflags_and_pkgconfig(name)
            pkg_name = line[9:]
            name_changed = pkg_name != new_name
            if name_changed or ldflags or pkg_config:  # Might not be necessary if names match already.
                binary_cmds, _ = _go_binary_cmds(static=static, ldflags=ldflags, pkg_config=pkg_config)
                if name_changed:
                    for k, v in binary_cmds.items():
                        set_command(new_name, k, 'mv -f ${PKG_DIR}/%s.a ${PKG_DIR}/%s.a && %s' % (new_name, pkg_name, v))
                else:
                    for k, v in binary_cmds.items():
                        set_command(new_name, k, v)
            if name_changed:
                for k, v in _go_library_cmds().items():
                    set_command(lib, k, 'mv -f ${PKG_DIR}/%s.a ${PKG_DIR}/%s.a && %s' % (new_name, pkg_name, v))


def _go_library_cmds(complete=True, all_srcs=False, cover=True):
    """Returns the commands to run for building a Go library."""
    go_compile_tool = 'compile' if CONFIG.GO_VERSION >= "1.5" else '6g'
    # Invokes the Go compiler.
    complete_flag = '-complete ' if complete else ''
    compile_cmd = '$TOOL tool %s -trimpath $TMP_DIR %s%s -pack -o $OUT ' % (go_compile_tool, complete_flag, _GOPATH)
    # Annotates files for coverage
    cover_cmd = 'for SRC in $SRCS; do mv -f $SRC _tmp.go; BN=$(basename $SRC); go tool cover -mode=set -var=GoCover_${BN//[.-]/_} _tmp.go > $SRC; done'
    prefix = ('export SRCS="$PKG_DIR/*.go"; ' + _LINK_PKGS_CMD) if all_srcs else _LINK_PKGS_CMD
    prefix += _go_import_path_cmd(CONFIG.GO_IMPORT_PATH)
    cmds = {
        'dbg': '%s; %s -N -l $SRCS' % (prefix, compile_cmd),
        'opt': '%s; %s $SRCS' % (prefix, compile_cmd),
    }
    if cover:
        cmds['cover'] = '%s; %s && %s $SRCS' % (prefix, cover_cmd, compile_cmd)
    return cmds


def _go_binary_cmds(static=False, ldflags='', pkg_config=''):
    """Returns the commands to run for linking a Go binary."""
    _go_link_tool = 'link' if CONFIG.GO_VERSION >= "1.5" else '6l'
    _link_cmd = '$TOOLS_GO tool %s -tmpdir $TMP_DIR -extld $TOOLS_LD %s -L . -o ${OUT} ' % (_go_link_tool, _GOPATH.replace('-I ', '-L '))
    prefix = _LINK_PKGS_CMD + _go_import_path_cmd(CONFIG.GO_IMPORT_PATH)

    if static:
        flags = '-linkmode external -extldflags "-static %s %s"' % (ldflags, pkg_config)
    elif ldflags or pkg_config:
        flags = '-extldflags "%s %s"' % (ldflags, pkg_config)
    else:
        flags = ''

    return {
        'dbg': '%s && %s %s $SRCS' % (prefix, _link_cmd, flags),
        'opt': '%s && %s %s -s -w $SRCS' % (prefix, _link_cmd, flags),
    }, {
        'go': [CONFIG.GO_TOOL],
        'ld': [CONFIG.LD_TOOL if CONFIG.LINK_WITH_LD_TOOL else CONFIG.CC_TOOL],
    }


def _go_import_path_cmd(import_path):
    """Returns a partial command which is used for setting up the Go import path."""
    if not import_path:
        return ''
    elif import_path.startswith('/'):
        raise ConfigError('GO_IMPORT_PATH cannot start with a /')
    elif '/' in import_path:
        return ' && mkdir -p %s && ln -s $TMP_DIR %s' % (dirname(import_path), import_path)
    else:
        return ' && ln -s $TMP_DIR ' + import_path


def _collect_linker_flags(static):
    """Returns a pre-build function to apply transitive linker flags to a go_binary rule."""
    def collect_linker_flags(name):
        ldflags, pkg_config = _get_ldflags_and_pkgconfig(name)
        if ldflags or pkg_config:
            cmds, _ =  _go_binary_cmds(static=static, ldflags=ldflags, pkg_config=pkg_config)
            for k, v in cmds.items():
                set_command(name, k, v)
    return collect_linker_flags


def _get_ldflags_and_pkgconfig(name):
    """Returns the ldflags and pkg-config invocations for a target."""
    labels = get_labels(name, 'cc:')
    ldflags = ' '.join([l[3:] for l in labels if l.startswith('ld:')])
    pkg_config = ' '.join([l[3:] for l in labels if l.startswith('pc:')])
    return (ldflags, '`pkg-config --libs %s`' % pkg_config) if pkg_config else (ldflags, '')
