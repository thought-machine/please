// Defines the inter-server RPC cache interface for running a cluster.
// Services in here aren't needed to be used by a client.

syntax = "proto3";

option java_package = "net.thoughtmachine.please.cache";

import "src/cache/proto/rpc_cache.proto";

package proto.rpc_cache;

service RpcServer {
    // Requests to join the cluster. Response indicates whether the client
    // is allowed to join.
    rpc Join(JoinRequest) returns (JoinResponse);
    // Adds an artifact to this node which has already been added to another.
    // Used to mirror stored artifacts between replicas.
    rpc Replicate(ReplicateRequest) returns (ReplicateResponse);
}

message JoinRequest {
    // Identifier of the machine.
    string name = 1;
    // Address & port of the machine.
    string address = 2;
}

message JoinResponse {
    // True if the caller is allowed to join the cluster.
    bool success = 1;
    // The node corresponding to the requestor. Will also appear in `nodes`.
    Node node = 2;
    // List of other known nodes.
    repeated Node nodes = 3;
    // Expected size of the cluster.
    int32 size = 6;
}

message ReplicateRequest {
    // Sequence of artifacts to store.
    repeated Artifact artifacts = 1;
    // OS of requestor
    string os = 2;
    // Architecture of requestor
    string arch = 3;
    // Hash of rule that generated these artifacts
    bytes hash = 4;
    // True to delete the artifact
    bool delete = 5;
}

message ReplicateResponse {
    // True if store was successful.
    bool success = 1;
}
