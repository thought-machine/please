{
    "preamble": "%s is a config setting defined in the .plzconfig file. See `plz help plzconfig` for more information.",
    "topics": {
        "accept": "Licences that are accepted in this repository.\n When this is empty licences are ignored. As soon as it's set any licence detected or assigned must be accepted explicitly here.\n There's no fuzzy matching, so some package managers (especially PyPI and Maven, but shockingly not npm which rather nicely uses SPDX) will generate a lot of slightly different spellings of the same thing, which will all have to be accepted here. We'd rather that than trying to 'cleverly' match them which might result in matching the wrong thing.",
        "allowlocalfallback": "If True, will attempt to run the test locally if containerised running fails.",
        "artool": "The tool invoked to archive static libraries. Defaults to ar.",
        "asmtool": "The tool invoked as an assembler. Currently only used on OSX for cc_embed_binary rules and so defaults to nasm.",
        "blacklistdirs": "Directories to blacklist when recursively searching for BUILD files (e.g. when using plz build ... or similar).\n This is generally useful when you have large directories within your repo that don't need to be searched, especially things like node_modules that have come from external package managers.",
        "buildfilename": "Sets the names that Please uses instead of BUILD for its build files.\n For clarity the documentation refers to them simply as BUILD files but you could reconfigure them here to be something else.\n One case this can be particularly useful is in cases where you have a subdirectory named build on a case-insensitive file system like HFS+.",
        "cctool": "The tool invoked to compile C code. Defaults to gcc but you might want to set it to clang, for example.",
        "cgocctool": "Sets the location of CC while building cgo_library and cgo_test rules. Defaults to gcc",
        "config": "The build config to use when one is not chosen on the command line. Defaults to opt.",
        "coverage": "If true (the default), coverage will be available for C and C++ build rules.\n This is still a little experimental but should work for GCC. Right now it does not work for Clang (it likely will in Clang 4.0 which will likely support --fprofile-dir) and so this can be useful to disable it.\n It's also useful in some cases for CI systems etc if you'd prefer to avoid the overhead, since the tests have to be compiled with extra instrumentation and without optimisation.",
        "cpptool": "The tool invoked to compile C++ code. Defaults to g++ but you might want to set it to clang++, for example.",
        "defaultcontainer": "Sets the default type of containerisation to use for tests that are given container = True.\n Currently the only option is 'docker' but we intend to add rkt support at some point.",
        "defaultdbgcflags": "Compiler rules passed to all C rules during dbg builds.\n Defaults to --std=c99 -g3 -DDEBUG -Wall -Wextra -Werror.",
        "defaultdbgcppflags": "Compiler rules passed to all C++ rules during dbg builds.\n Defaults to --std=c++11 -g3 -DDEBUG -Wall -Wextra -Werror.",
        "defaultimage": "The default image used for any test that doesn't specify another.",
        "defaultinterpreter": "The interpreter used for python_binary and python_test rules when none is specified on the rule itself. Defaults to python but you could of course set it to pypy.",
        "defaultldflags": "Linker flags passed to all C++ rules.\n By default this is empty.",
        "defaultnamespace": "Namespace passed to all cc_embed_binary rules when not overridden by the namespace argument to that rule.\n Not set by default, if you want to use those rules you'll need to set it or pass it explicitly to each one.",
        "defaultoptcflags": "Compiler flags passed to all C rules during opt builds; these are typically pretty basic things like what language standard you want to target, warning flags, etc.\n Defaults to --std=c99 -O3 -DNDEBUG -Wall -Wextra -Werror",
        "defaultoptcppflags": "Compiler flags passed to all C++ rules during opt builds; these are typically pretty basic things like what language standard you want to target, warning flags, etc.\n Defaults to --std=c++11 -O3 -DNDEBUG -Wall -Wextra -Werror",
        "defaultpiprepo": "Defines a location for a pip repo to download wheels from.\n By default pip_library uses PyPI (although see below on that) but you may well want to use this define another location to upload your own wheels to.\n Is overridden by the repo argument to pip_library.",
        "defaulttestpackage": "The Java classpath to search for functions annotated with @Test.",
        "dir": "Sets the directory to use for the dir cache.\n The default is .plz-cache, if set to the empty string the dir cache will be disabled.",
        "dircachecleaner": "The binary to use for cleaning the directory cache.\n Defaults to cache_cleaner in the plz install directory.\n Can also be set to the empty string to disable attempting to run it - note that this will of course lead to the dir cache growing without limit which may ruin your day if it fills your disk :)",
        "dircachehighwatermark": "Starts cleaning the directory cache when it is over this number of bytes.\n Can also be given with human-readable suffixes like 10G, 200MB etc.",
        "dircachelowwatermark": "When cleaning the directory cache, it's reduced to at most this size.",
        "downloadlocation": "Defines the location to download Please from when self-updating. Defaults to the Please web server, but you can point it to some location of your own if you prefer to keep traffic within your network or use home-grown versions.",
        "excludeextension": "Extensions of files to exclude from coverage.\n Typically this is for generated code; the default is to exclude protobuf extensions like .pb.go, _pb2.py, etc.",
        "fallbackconfig": "The build config to use when one is chosen and a required target does not have one by the same name. Also defaults to opt.",
        "fileextension": "Extensions of files to consider for coverage.\n Defaults to a reasonably obvious set for the builtin rules including .go, .py, .java, etc.",
        "godep": "An in-repo dependency that's applied to any Go targets built.",
        "gogrpcdep": "An in-repo dependency that's applied to any Go gRPC targets built.",
        "gopath": "If set, will set the GOPATH environment variable appropriately during build actions.",
        "goroot": "If set, will set the GOROOT environment variable appropriately during build actions.",
        "goversion": "String identifying the version of the Go compiler.\n This is only now really important for anyone targeting versions of Go earlier than 1.5 since some of the tool names have changed (6g and 6l became compile and link in Go 1.5).\n We're pretty sure that targeting Go 1.4 works; we're not sure about 1.3 (never tried) but 1.2 certainly doesn't since some of the flags to go tool pack are different. We assume nobody is terribly bothered about this... ",
        "grpcjavaplugin": "The plugin invoked to compile Java code for grpc_library.\n Defaults to protoc-gen-grpc-java.",
        "grpcpythonplugin": "The plugin invoked to compile Python code for grpc_library.\n Defaults to protoc-gen-grpc-python.",
        "grpcversion": "Identifies the version of the gRPC compiler. This is mostly there to force a rebuild when it's changed.\n Note that since various incompatibilities can appear with different versions, it's a good idea for this to match the version of the actual compiler at all times.",
        "httptimeout": "Timeout for operations contacting the HTTP cache, in seconds.",
        "httpurl": "Base URL of the HTTP cache.\n Not set to anything by default which means the cache will be disabled.",
        "httpwriteable": "If True this plz instance will write content back to the HTTP cache.\n By default it runs in read-only mode.",
        "jarcattool": "Defines the tool used to concatenate .jar files which we use to build the output of java_binary and java_test.Defaults to jarcat in the Please install directory.",
        "jartool": "Defines the tool used to build a .jar. Defaults to jar.",
        "javactool": "Defines the tool used for the Java compiler. Defaults to javac.",
        "javadep": "An in-repo dependency that's applied to any Java targets built.",
        "javagrpcdep": "An in-repo dependency that's applied to any Java gRPC targets built.",
        "junitrunner": "Defines the .jar containing the JUnit runner. This is built into all java_test rules since it's necessary to make JUnit do anything useful.\n Defaults to junit_runner.jar in the Please install directory.",
        "keep": "Marks targets that gc should always keep. Can include meta-targets such as //test/... and //docs:all.",
        "keeplabel": "Defines a target label to be kept; for example, if you set this to go, no Go targets would ever be considered for deletion.",
        "lang": "Sets the language passed to build rules when building. This can be important for some tools (although hopefully not many) - we've mostly observed it with Sass.",
        "language": "Sets the default set of languages that proto rules are built for.\n Chosen from the set of {cc, java, go, py}.\n Defaults to all of them!",
        "ldtool": "The tool invoked to link object files. Defaults to ld but you could also set it to gold, for example.",
        "linkwithldtool": " If true, instructs Please to use the tool set earlier in ldtool to link binaries instead of cctool.\n This is an esoteric setting that most people don't want; a vanilla ld will not perform all steps necessary here (you'll get lots of missing symbol messages from having no libc etc). Generally best to leave this disabled.",
        "location": "Defines the directory Please is installed into.\n Defaults to ~/.please but you might want it to be somewhere else if you're installing via another method (e.g. the debs and install script still use /opt/please).",
        "moduledir": "Defines a directory containing modules from which they can be imported at the top level.\n By default this is empty but by convention we define our pip_library rules in third_party/python and set this appropriately. Hence any of those third-party libraries that try something like import six will have it work as they expect, even though it's actually in a different location within the .pex.",
        "nonce": "This is an arbitrary string that is added to the hash of every build target. It provides a way to force a rebuild of everything when it's changed.\n We will bump the default of this whenever we think it's required - although it's been a pretty long time now and we hope that'll continue.",
        "numthreads": "Number of parallel build operations to run.\n Is overridden by the equivalent command-line flag, if that's passed.",
        "path": "The PATH variable that will be passed to the build processes.\n Defaults to /usr/local/bin:/usr/bin:/bin but of course can be modified if you need to get binaries from other locations.",
        "pextool": "The tool that's invoked to build pexes. Defaults to please_pex in the install directory.",
        "piptool": "The tool that is invoked during pip_library rules. Defaults to, well, pip.",
        "pleasemaventool": "Defines the tool used to fetch information from Maven in maven_jars rules.\n Defaults to please_maven in the Please install directory.",
        "protocgoplugin": "The binary passed to protoc as a plugin to generate Go code. Defaults to protoc-gen-go.\n We've found this easier to manage with a go_get rule instead though, so you can also pass a build label here. See the Please repo for an example.",
        "protoctool": "The binary invoked to compile .proto files. Defaults to protoc.",
        "protocversion": "Identifies the version of the protoc compiler. This is mostly there to force a rebuild when it's changed.\n Note that since various incompatibilities can appear with different versions, it's a good idea for this to match the version of the actual compiler at all times.",
        "pushfrequency": " The frequency, in milliseconds, to push statistics at. Defaults to 100.",
        "pushgatewayurl": " The URL of the pushgateway to send metrics to.",
        "pythondep": "An in-repo dependency that's applied to any Python targets built.",
        "pythongrpcdep": "An in-repo dependency that's applied to any Python gRPC targets built.",
        "reject": " Licences that are explicitly rejected in this repository.\n An astute observer will notice that this is not very different to just not adding it to the accept section, but it does have the advantage of explicitly documenting things that the team aren't allowed to use.",
        "removetimeout": "Timeout to wait when trying to remove a container after running a test. Defaults to 20 seconds.",
        "resultstimeout": "Timeout to wait when trying to retrieve results from inside the container. Default is 20 seconds.",
        "rpcmaxmsgsize": "Maximum size of a single message that we'll send to the RPC server.\n This should agree with the server's limit, if it's higher the artifacts will be rejected.\n The value is given as a byte size so can be suffixed with M, GB, KiB, etc.",
        "rpctimeout": "Timeout for operations contacting the RPC cache, in seconds.",
        "rpcurl": "Base URL of the RPC cache.\n Not set to anything by default which means the cache will be disabled.",
        "rpcwriteable": "If True this plz instance will write content back to the RPC cache.\n By default it runs in read-only mode.",
        "runargs": "Arguments passed to docker run when running a test.",
        "selfupdate": "Sets whether plz will attempt to update itself when the version set in the config file is different.",
        "sourcelevel": "The default Java source level when compiling. Defaults to 8.",
        "targetlevel": "The default Java bytecode level to target. Defaults to 8.",
        "testtool": "Sets the location of the please_go_test tool that is used to template the test main for go_test rules.",
        "timeout": "Default timeout for Dockerised tests, in seconds. Default is 1200 (twenty minutes).",
        "usepypi": "Whether or not to use PyPI for pip_library rules or not. Defaults to true, if you disable this you will presumably want to set DefaultPipRepo to use one of your own.\n Is overridden by the use_pypi argument to pip_library.",
        "version": "Defines the version of plz that this repo is supposed to use currently. If it's not present or the version matches the currently running version no special action is taken; otherwise if SelfUpdate is set Please will attempt to download an appropriate version, otherwise it will issue a warning and continue.\n\n Note that if this is not set, you can run plz update to update to the latest version available on the server."
    }
}
