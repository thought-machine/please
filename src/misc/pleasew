#!/bin/bash
set -eu

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
RESET="$(tput sgr0)"

DEFAULT_URL_BASE="https://get.please.build"
# We might already have it downloaded...
LOCATION=`grep -i "^location" .plzconfig | cut -d '=' -f 2 | tr -d ' '`
if [ -z "$LOCATION" ]; then
    if [ -z "$HOME" ]; then
	    echo "${RED}\$HOME not set, not sure where to look for Please.${RESET}"
	    exit 1
    fi
    LOCATION="${HOME}/.please"
fi
# If this exists at any version, let it handle any update.
TARGET="${LOCATION}/please"
if [ -f "$TARGET" ]; then
    exec "$TARGET" $@
fi

URL_BASE=`grep -i "^downloadlocation" .plzconfig | cut -d '=' -f 2 | tr -d ' '`
if [ -z "$URL_BASE" ]; then
    URL_BASE=$DEFAULT_URL_BASE
fi
URL_BASE="${URL_BASE%/}"

VERSION=`grep -i "^version" .plzconfig | cut -d '=' -f 2 | tr -d ' '`
if [ -z "$VERSION" ]; then
    echo "${YELLOW}Can't determine version, will use latest.${RESET}"
    VERSION=`curl -fsSL ${URL_BASE}/latest_version`
fi

# Find the os / arch to download. You can do this quite nicely with go env
# but we use this script on machines that don't necessarily have Go itself.
OS=`uname`
if [ "$OS" = "Linux" ]; then
    GOOS="linux"
elif [ "$OS" = "Darwin" ]; then
    GOOS="darwin"
else
    echo "${RED}Unknown operating system $OS${RESET}"
    exit 1
fi
# Don't have any builds other than amd64 at the moment.
ARCH="amd64"

PLEASE_URL="${URL_BASE}/${GOOS}_${ARCH}/${VERSION}/please_${VERSION}.tar.gz"
DIR="${LOCATION}/${VERSION}"
# Potentially we could reuse this but it's easier not to really.
if [ ! -d "$DIR" ]; then
    rm -rf "$DIR"
fi
echo "${GREEN}Downloading Please ${VERSION} to ${DIR}...${RESET}"
mkdir -p "$DIR"
curl -fsSL "${PLEASE_URL}" | tar -xzpf- --strip-components=1 -C "$DIR"
# Link it all back up a dir
for x in `ls "$DIR"`; do
    ln -sf "${DIR}/${x}" "$LOCATION"
done
ln -sf "${DIR}/please" "${LOCATION}/plz"

# Check if they've got any parser engines available.
if [ -f "/usr/lib/libpypy-c.so" ] || [ -f "/usr/local/lib/libpypy-c.so" ]; then
    echo "${GREEN}Found libpypy for parser engine${RESET}"
    exec "$TARGET" $@
fi
echo "${YELLOW}PyPy not found, will check cpython...${RESET}"

# Not worth trying to figure out where libpython might be.
if ! hash python 2>/dev/null ; then
    echo "${RED}Can't find python, you'll need either Python or PyPy installed for the parser.${RESET}"
    exit 1
fi

set +e
python -c 'import cffi' 2> /dev/null
if [ $? -eq 0 ]; then
    echo "${GREEN}Found cpython and cffi for parser engine${RESET}"
    exec "$TARGET" $@
fi

echo "${RED}cffi not installed; you will need to install it: sudo pip install 'cffi>=1.5.0'${RESET}"
if ! hash pip 2>/dev/null ; then
    echo "${RED}pip doesn't seem to be installed${RESET}"
    exit 1
fi
read -p "${YELLOW}Do you want to install it now? [y/N] ${RESET}" -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "${RED}OK, stopping.${RESET}"
    exit 1
fi
if [ `sudo pip install 'cffi>=1.5.0'` ]; then
    echo "${RED}pip failed${RESET}"
    exit 1
fi
echo "${GREEN}Should be good to go now, running plz...${RESET}"
exec "$TARGET" $@
